/*
 * Main Script
 *
 * Copyright (c) 2014 Cisco Systems 
 *   Alex Holden <a@lexholden.com> <ajonasho@cisco.com>
 *   Matt Weeks <maweeks@cisco.com>
 *
 */

/*
 *	First init all the global variables
 *
 */

// set EVERY 'state' here so will undo ALL layout changes
// used by the 'Reset State' button: myLayout.loadState( stateResetSettings )
var stateResetSettings = {
	north__size:		"auto",
	north__initClosed:	false,
	north__initHidden:	false,
	south__size:		"auto",
	south__initClosed:	false,
	south__initHidden:	false,
	west__size:			200,
	west__initClosed:	false,
	west__initHidden:	false,
	east__size:			300,
	east__initClosed:	false,
	east__initHidden:	true
};

var myLayout;

var nodePaths = {
	vnc: "M3.25,6.469v19.062h25.5V6.469H3.25zM10.345,11.513l-4.331,1.926V12.44l3.124-1.288v-0.018L6.014,9.848v-1l4.331,1.927V11.513zM16.041,14.601h-5.05v-0.882h5.05V14.601z",
	router: "M25.083,18.895l-8.428-2.259l2.258,8.428l1.838-1.837l7.053,7.053l2.476-2.476l-7.053-7.053L25.083,18.895zM5.542,11.731l8.428,2.258l-2.258-8.428L9.874,7.398L3.196,0.72L0.72,3.196l6.678,6.678L5.542,11.731zM7.589,20.935l-6.87,6.869l2.476,2.476l6.869-6.869l1.858,1.857l2.258-8.428l-8.428,2.258L7.589,20.935zM23.412,10.064l6.867-6.87l-2.476-2.476l-6.868,6.869l-1.856-1.856l-2.258,8.428l8.428-2.259L23.412,10.064z",
	network: "M7.562,24.812c-3.313,0-6-2.687-6-6l0,0c0.002-2.659,1.734-4.899,4.127-5.684l0,0c0.083-2.26,1.937-4.064,4.216-4.066l0,0c0.73,0,1.415,0.19,2.01,0.517l0,0c1.266-2.105,3.57-3.516,6.208-3.517l0,0c3.947,0.002,7.157,3.155,7.248,7.079l0,0c2.362,0.804,4.062,3.034,4.064,5.671l0,0c0,3.313-2.687,6-6,6l0,0H7.562L7.562,24.812zM24.163,14.887c-0.511-0.095-0.864-0.562-0.815-1.079l0,0c0.017-0.171,0.027-0.336,0.027-0.497l0,0c-0.007-2.899-2.352-5.245-5.251-5.249l0,0c-2.249-0.002-4.162,1.418-4.911,3.41l0,0c-0.122,0.323-0.406,0.564-0.748,0.63l0,0c-0.34,0.066-0.694-0.052-0.927-0.309l0,0c-0.416-0.453-0.986-0.731-1.633-0.731l0,0c-1.225,0.002-2.216,0.993-2.22,2.218l0,0c0,0.136,0.017,0.276,0.045,0.424l0,0c0.049,0.266-0.008,0.54-0.163,0.762l0,0c-0.155,0.223-0.392,0.371-0.657,0.414l0,0c-1.9,0.313-3.352,1.949-3.35,3.931l0,0c0.004,2.209,1.792,3.995,4.001,4.001l0,0h15.874c2.209-0.006,3.994-1.792,3.999-4.001l0,0C27.438,16.854,26.024,15.231,24.163,14.887L24.163,14.887",
	subnet: "M6.812,17.202l7.396-3.665v-2.164h-0.834c-0.414,0-0.808-0.084-1.167-0.237v1.159l-7.396,3.667v2.912h2V17.202zM26.561,18.875v-2.913l-7.396-3.666v-1.158c-0.358,0.152-0.753,0.236-1.166,0.236h-0.832l-0.001,2.164l7.396,3.666v1.672H26.561zM16.688,18.875v-7.501h-2v7.501H16.688zM27.875,19.875H23.25c-1.104,0-2,0.896-2,2V26.5c0,1.104,0.896,2,2,2h4.625c1.104,0,2-0.896,2-2v-4.625C29.875,20.771,28.979,19.875,27.875,19.875zM8.125,19.875H3.5c-1.104,0-2,0.896-2,2V26.5c0,1.104,0.896,2,2,2h4.625c1.104,0,2-0.896,2-2v-4.625C10.125,20.771,9.229,19.875,8.125,19.875zM13.375,10.375H18c1.104,0,2-0.896,2-2V3.75c0-1.104-0.896-2-2-2h-4.625c-1.104,0-2,0.896-2,2v4.625C11.375,9.479,12.271,10.375,13.375,10.375zM18,19.875h-4.625c-1.104,0-2,0.896-2,2V26.5c0,1.104,0.896,2,2,2H18c1.104,0,2-0.896,2-2v-4.625C20,20.771,19.104,19.875,18,19.875z",
	port: "M22.6,0h-7.4l-0.4,0.4v14.7L15,17h-0.3v0.2h-0.2v-0.2H14v0.2h-0.2v-0.3h-0.4V17h-0.9l-1.6-0.3V16h0.7	l0.2-1.2H14c0.2,0,0.2-0.2,0.2-0.2V3.8c0-0.2-0.1-0.2-0.2-0.2H0.2C0.1,3.5,0,3.7,0,3.8v10.8c0,0.2,0.2,0.2,0.2,0.2h2.4l0.2,1.2H4	l-2.7,2.7L0.6,20c0,0,2.3,0.9,5.4,0.9c3.1,0,7.8-0.7,8.5-0.7s3.9,0,3.9,0v-1v-0.9h1.4c-0.2,0.1-0.2,0.2-0.2,0.3v0.8	c0,0.2,0.5,0.5,1.1,0.5c0.6,0,1-0.2,1-0.5v-0.8c0-0.2-0.5-0.5-1-0.5c-0.2,0-0.3,0-0.4,0V18h-1.9l-0.1-0.3h4.4L22.6,0L22.6,0z	 M1,13.7V4.4h12.2v9.3H1z",
	link: "M22.5,8.5v3.168l3.832,3.832L22.5,19.332V22.5l7-7L22.5,8.5zM8.5,22.5v-3.168L4.667,15.5L8.5,11.668V8.5l-7,7L8.5,22.5zM15.5,14.101c-0.928,0-1.68,0.751-1.68,1.68c0,0.927,0.752,1.681,1.68,1.681c0.927,0,1.68-0.754,1.68-1.681C17.18,14.852,16.427,14.101,15.5,14.101zM10.46,14.101c-0.928,0-1.68,0.751-1.68,1.68c0,0.927,0.752,1.681,1.68,1.681s1.68-0.754,1.68-1.681C12.14,14.852,11.388,14.101,10.46,14.101zM20.541,14.101c-0.928,0-1.682,0.751-1.682,1.68c0,0.927,0.754,1.681,1.682,1.681s1.68-0.754,1.68-1.681C22.221,14.852,21.469,14.101,20.541,14.101z",
	remove: "M20.826,5.75l0.396,1.188c1.54,0.575,2.589,1.44,2.589,2.626c0,2.405-4.308,3.498-8.312,3.498c-4.003,0-8.311-1.093-8.311-3.498c0-1.272,1.21-2.174,2.938-2.746l0.388-1.165c-2.443,0.648-4.327,1.876-4.327,3.91v2.264c0,1.224,0.685,2.155,1.759,2.845l0.396,9.265c0,1.381,3.274,2.5,7.312,2.5c4.038,0,7.313-1.119,7.313-2.5l0.405-9.493c0.885-0.664,1.438-1.521,1.438-2.617V9.562C24.812,7.625,23.101,6.42,20.826,5.75zM11.093,24.127c-0.476-0.286-1.022-0.846-1.166-1.237c-1.007-2.76-0.73-4.921-0.529-7.509c0.747,0.28,1.58,0.491,2.45,0.642c-0.216,2.658-0.43,4.923,0.003,7.828C11.916,24.278,11.567,24.411,11.093,24.127zM17.219,24.329c-0.019,0.445-0.691,0.856-1.517,0.856c-0.828,0-1.498-0.413-1.517-0.858c-0.126-2.996-0.032-5.322,0.068-8.039c0.418,0.022,0.835,0.037,1.246,0.037c0.543,0,1.097-0.02,1.651-0.059C17.251,18.994,17.346,21.325,17.219,24.329zM21.476,22.892c-0.143,0.392-0.69,0.95-1.165,1.235c-0.474,0.284-0.817,0.151-0.754-0.276c0.437-2.93,0.214-5.209-0.005-7.897c0.881-0.174,1.708-0.417,2.44-0.731C22.194,17.883,22.503,20.076,21.476,22.892zM11.338,9.512c0.525,0.173,1.092-0.109,1.268-0.633h-0.002l0.771-2.316h4.56l0.771,2.316c0.14,0.419,0.53,0.685,0.949,0.685c0.104,0,0.211-0.017,0.316-0.052c0.524-0.175,0.808-0.742,0.633-1.265l-1.002-3.001c-0.136-0.407-0.518-0.683-0.945-0.683h-6.002c-0.428,0-0.812,0.275-0.948,0.683l-1,2.999C10.532,8.77,10.815,9.337,11.338,9.512z",
	publicnetwork: "M24.345,13.904c0.019-0.195,0.03-0.392,0.03-0.591c0-3.452-2.798-6.25-6.25-6.25c-2.679,0-4.958,1.689-5.847,4.059c-0.589-0.646-1.429-1.059-2.372-1.059c-1.778,0-3.219,1.441-3.219,3.219c0,0.21,0.023,0.415,0.062,0.613c-2.372,0.391-4.187,2.436-4.187,4.918c0,2.762,2.239,5,5,5h15.875c2.762,0,5-2.238,5-5C28.438,16.362,26.672,14.332,24.345,13.904z",
	linux: "M7.8,22.5c0.9-0.1,1.1-1.1,0.6-1.5c-0.4-0.4-2.4-1.9-2.9-2.5c-0.2-0.3-0.6-0.4-0.7-0.7	c-0.3-0.7-0.6-1.7-0.1-2.4c0.1-0.1,0.1-0.1,0.1,0.2c-0.3,1.5,0.7,2.8,0.9,2.2c0.2-0.4,0-1.2,0.1-1.9c0.1-1.1,1.2-3.3,1.6-3.4	C6.6,11.1,8.1,10.1,8.1,9c0-0.7,0.6,0.9,1.3,1.3c0.7,0.4,1.5-0.7,2.7-1.3c0.3-0.2,0.7-0.3,0.7-0.5c-0.1-0.7-1.5,0.8-2.7,0.9	c-0.6,0-0.8-0.1-1-0.3c-0.7-0.6,0.1-0.1,1-0.3c0.4-0.1,0.6-0.1,1-0.3c0.5-0.2,1-0.5,1.5-0.6c0.4-0.1,0.3-0.4,0.2-0.5	c-0.1,0-0.2,0-0.3,0.1c-0.2,0.4-1.3,0.6-1.6,0.7c-0.4,0.1-0.9,0.2-1.5,0.2c-0.9,0-0.7-0.5-1.4-0.9C7.9,7.4,8,7.1,8.2,6.9	c0.1-0.1,0.5-0.2,0.7-0.5c0,0,0.3-0.3,0.5-0.4c0.1,0,0.1-1.2-0.5-1.2c-0.5,0-0.6,0.4-0.6,0.8c0,0.4,0.2,0.7,0.4,0.7	c0.3,0,0,0.3-0.1,0.3C8.3,6.5,8,5.6,8,5.2c0-0.5,0.3-1.3,0.9-1.3c0.5,0,0.9,0.7,0.9,1.8c0,0.2,0.9-0.1,1.1,0.2	c0.2,0.2-0.7-2,1.3-2.2c0.5,0.1,1,0.3,1.3,1.5c-0.1,0.1,0.1,1-0.2,1.1c-0.4,0.1-0.7,0-0.4-0.4c0.2-0.4,0-1.4-0.8-1.3	c-0.8,0.1-0.7,1.5-0.5,1.5c0.2,0,0.8,0.4,1.2,0.5c1.3,0.2,0.3,1,0.5,1.9c0.2,1,0.9,0.7,1.5,3.4c0.1,0.2,0.6,0.3,1.1,2.4	c0.4,1.9-0.2,3.2,0.9,3.1c0.2,0,0.6-0.1,0.7-0.6c0.4-1.4-0.2-3-0.8-4.1c-0.3-0.6-0.7-1.1-0.8-1.2c0.7,0.4,1.5,1.7,1.7,2.6	c0.3,1.2,0.5,1.8,0.1,3.1c0.2,0.1,0.8,0.4,0.8,0.6c-0.6-0.5-2.4-0.6-2.5,0.6c-0.3,0-0.5,0-0.7,0.3c-0.7,0.9-0.1,2.6-0.1,3.6	c-0.1,0.8-0.3,1.6-0.4,2.5c-0.4,0-0.4-0.3-0.3-0.8c0.1-0.4,0.3-0.9,0.3-1.4c0-0.4,0-0.7-0.1-0.8c-0.1-0.1-0.3,0.1-0.5,0.4	c-0.5,0.8-1.6,1.2-2.6,1.3c-1,0.1-2,0-2.5-0.5c-0.2-0.2-0.5,0.1-0.5,0.1c0,0.1,0.2,0.2,0.3,0.5C9.1,24,9.3,24.7,8.7,25	C8.8,23.5,8.3,23.4,7.8,22.5L7.8,22.5z M7.4,22.4c0.4,0.6,1.6,3-0.6,3.3c-0.7,0.1-2-0.4-3.1-0.7c-1.1-0.3-2.1-0.4-2.7-0.6	c-0.4-0.1-0.5-0.2-0.5-0.4c-0.1-0.4,0.4-1,0.5-1.4c0-0.5-0.2-0.7-0.3-1.1c-0.2-0.4-0.2-0.7-0.1-0.8c0.1-0.1,0.3-0.2,0.6-0.2	c0.4,0,0.9,0,1.2-0.2C2.8,20,3,19.5,2.8,18.8c0,0.7-0.2,0.9-0.8,1.3c-0.5,0.3-1.3,0.1-1.7,0.4c-0.5,0.4,0.2,1.4,0.1,2.2	c0,0.6-0.6,1.2-0.4,1.8c0.3,0.6,1.5,0.6,2.8,0.9c1.9,0.4,2.9,1.1,3.8,1.1c1.2,0,1.4-1.2,3.4-1.3c0.6,0,1.1,0,1.7-0.1	c0.6,0,1.3,0,1.9,0c1.3,0,0.9,0.7,1.7,1.1c0.7,0.4,2,0.2,2.3-0.1c0.4-0.4,1.5-1.3,2.4-1.8c1.1-0.5,3.6-1.5,1.7-2.6	c-0.4-0.3-1.4-0.5-1.5-2.5c-0.4,0.3-0.3,2.1,0.7,2.5c1.2,0.4,1.9,1.1-0.3,1.8c-1.5,0.5-1.7,0.6-2.9,1.6c-1.2,1-2.9,0.6-2.6-1.5	c0.2-1.1,0.2-1.9,0-2.9c-0.1-0.5-0.2-1-0.1-1.4c0.2-0.8,0.6-1,1-0.3c0.3,0.5,0.4,1,1.3,1.1c1.5,0.1,1.8-1.4,2.2-1.5	c0.3,0,0.6-0.9,0.4-2.4c-0.3-1.5-1.2-4-2.3-5.2c-1-1-1.6-1.9-2-3.2c-0.3-1.1-0.5-2.1-0.4-3.1c0.1-1.3-0.6-3.1-1.8-4	C12.9,0.3,11.8,0,10.7,0c-0.6,0-1.1,0.1-1.5,0.3C7.5,1.2,7.3,2.6,7.3,4.1c0,1.4,0.1,3,0.2,4.6c-0.2,0.7-1.2,2-1.8,2.9	c-0.9,0.8-1.3,2.5-1.8,3.9c-0.3,0.8-0.8,1.1-0.8,2.1c0,0.3,0,1,0.3,0.8C4.3,17.5,5.5,19.5,7.4,22.4L7.4,22.4z M12.6,2	c-0.1,0.2-0.3,0.3-0.1,0.4c0.1,0.1,0.2-0.2,0.5-0.3c0.1,0,0.4,0,0.5-0.2c0-0.1-0.2-0.2-0.3-0.3c-0.1-0.1-0.2-0.2-0.4-0.2	C12.5,1.5,12.7,1.8,12.6,2L12.6,2z M14.4,7.9c0.1-0.1,0.2,0.2,0.4,0.4c0.2,0.1,0.4,0,0.5,0.3c0,0.2-0.1,0.4-0.3,0.4	C14.7,8.9,14.1,8.2,14.4,7.9L14.4,7.9z M9.7,6.1C9.2,6,9.2,6.4,9.3,6.4C9.5,6.3,9.4,6.1,9.7,6.1L9.7,6.1z M8.9,5.2	C8.9,5.2,9,5.3,9,5.4c0,0.2,0,0.3,0.1,0.3c0,0,0,0,0.1-0.1C9.2,5.3,9,5,8.9,5C8.8,5,8.8,5.2,8.9,5.2L8.9,5.2z M12.3,5	c0.1,0,0.2,0.2,0.3,0.5c0,0,0.2,0,0.2-0.1c0-0.4-0.3-0.5-0.4-0.5C12.1,4.9,12.2,5,12.3,5L12.3,5z M10.5,6.1C11,5.9,11.1,6.2,11,6.3	C10.8,6.3,10.8,6,10.5,6.1L10.5,6.1z M5.4,13.4c-0.2,0,0.1-0.2,0.2-0.4c0.1-0.2,0.1-0.5,0.2-0.4c0.1,0,0.1,0.2,0,0.4	C5.7,13.2,5.5,13.4,5.4,13.4L5.4,13.4z",
	volume: "m 5.9914286,-0.92921889 0,26.49899989 22.5015004,0 0,-26.49899989 z M 26.991963,24.171246 l -19.4997845,0 c 0,-7.5 0,-16.100786 0,-23.60078583 7.4996675,-1.16e-6 12.0001175,-4.6e-7 19.4997845,0 z M 9.1973994,1.579423 c 0,0.3960293 -0.3204713,0.7170731 -0.7157919,0.7170731 -0.3953206,0 -0.7157919,-0.3210438 -0.7157919,-0.7170731 0,-0.3960282 0.3204713,-0.71707312 0.7157919,-0.71707312 0.3953206,0 0.7157919,0.32104492 0.7157919,0.71707312 z m 0,21.60217 c 0,0.39603 -0.3204713,0.717073 -0.7157919,0.717073 -0.3953206,0 -0.7157919,-0.321043 -0.7157919,-0.717073 0,-0.396029 0.3204713,-0.717073 0.7157919,-0.717073 0.3953206,0 0.7157919,0.321044 0.7157919,0.717073 z M 16.961179,12.551281 c -1.858921,0 -3.34375,1.485015 -3.34375,3.34375 0,1.858735 1.484829,3.375 3.34375,3.375 1.858921,0 3.375,-1.516265 3.375,-3.375 0,-1.858735 -1.516079,-3.34375 -3.375,-3.34375 z M 26.737084,1.5794231 c 0,0.3960292 -0.320471,0.717073 -0.715792,0.717073 -0.395322,0 -0.715792,-0.3210438 -0.715792,-0.717073 0,-0.3960284 0.320471,-0.71707323 0.715792,-0.71707323 0.395321,0 0.715792,0.32104483 0.715792,0.71707323 z m -0.045,21.5575259 c 0,0.396031 -0.320471,0.717075 -0.715792,0.717075 -0.395322,0 -0.715792,-0.321044 -0.715792,-0.717075 0,-0.396026 0.32047,-0.717071 0.715792,-0.717071 0.395321,0 0.715792,0.321045 0.715792,0.717071 z M 17.07725,8.1807454 c -4.154027,0 -7.53125,3.3772336 -7.53125,7.5312496 0,4.154016 3.377223,7.53125 7.53125,7.53125 4.154027,0 7.5,-3.377234 7.5,-7.53125 0,-4.154016 -3.345973,-7.5312496 -7.5,-7.5312496 z m 0,1 c 3.60687,0 6.5,2.9236566 6.5,6.5312496 0,3.607593 -2.89313,6.53125 -6.5,6.53125 -3.606869,0 -6.53125,-2.923657 -6.53125,-6.53125 0,-3.607593 2.924381,-6.5312496 6.53125,-6.5312496 z",
	ubuntu: "M19.9,4.4C21,5,22.5,4.7,23.2,3.5c0.7-1.1,0.3-2.6-0.9-3.2c-1.2-0.7-2.7-0.3-3.3,0.9	C18.3,2.3,18.7,3.7,19.9,4.4z M14.9,19.6c-1.1,0-2.1-0.2-3-0.6l-1.7,2.9c1.4,0.7,3,1.1,4.7,1.1c1,0,1.9-0.1,2.8-0.4	c0.2-0.9,0.7-1.8,1.7-2.3c0.9-0.5,2-0.6,2.9-0.2c1.8-1.7,3-4,3.1-6.6l-3.5,0C21.7,16.9,18.6,19.6,14.9,19.6z M14.9,5.9	c3.7,0,6.8,2.8,7.1,6.3l3.5,0c-0.2-2.6-1.3-4.9-3.2-6.6c-0.9,0.3-2,0.3-2.9-0.2c-0.9-0.5-1.5-1.4-1.7-2.3c-0.9-0.2-1.9-0.4-2.8-0.4	c-1.7,0-3.3,0.4-4.7,1.1l1.7,2.9C12.8,6.1,13.8,5.9,14.9,5.9z M7.7,12.7c0-2.3,1.2-4.4,3-5.6L9,4.2c-2.1,1.4-3.7,3.5-4.4,5.9	c0.8,0.6,1.3,1.5,1.3,2.6c0,1-0.5,2-1.3,2.6c0.7,2.5,2.2,4.6,4.4,5.9l1.8-2.9C8.9,17.1,7.7,15.1,7.7,12.7z M19.9,21.1	c-1.2,0.7-1.6,2.1-0.9,3.2c0.7,1.1,2.2,1.5,3.3,0.9c1.2-0.7,1.6-2.1,0.9-3.2C22.5,20.8,21,20.4,19.9,21.1z M2.4,10.4	c-1.3,0-2.4,1.1-2.4,2.4c0,1.3,1.1,2.4,2.4,2.4c1.3,0,2.4-1.1,2.4-2.4C4.9,11.4,3.8,10.4,2.4,10.4",
	windows: "M16.6,13.4c-1.6-0.2-2.7-0.8-3.8-1.5l0,0l-0.5,0.3l-2.3,8l0,0c1.1,0.7,2.6,1.5,4.2,1.7	c2.4,0.3,5-0.7,5.8-1.1l2.4-8.2l-0.5-0.3C21.8,12.4,19.4,13.8,16.6,13.4z M11.5,11c-1.1-0.8-2.3-1.5-3.9-1.6c-0.3,0-0.6,0-0.8,0	c-2.7,0-4.5,1.2-4.5,1.2l-2.3,8l0,0l0.5,0.3c0.9-0.4,2.5-1,4.6-0.9c1.5,0.1,2.6,0.7,3.7,1.4l0.5-0.2l0,0L11.5,11z M7.7,8.6	c1.5,0.1,2.6,0.7,3.7,1.4l0.5-0.2l0,0l2.3-8c-1.1-0.8-2.3-1.5-3.9-1.6C10,0,9.7,0,9.4,0C6.7,0,5,1.2,5,1.2l-2.3,8l0.5,0.3	C4,9,5.7,8.4,7.7,8.6z M24.5,3.1L24.5,3.1c0,0-2.3,1.3-5.2,1c-1.6-0.2-2.7-0.8-3.8-1.5L15,2.8l-2.3,8l0,0c1.1,0.7,2.6,1.5,4.2,1.7	c2.4,0.3,5-0.7,5.8-1.1L25,3.3L24.5,3.1z",
	external: "M 10.391,8.802 C 10.322,8.742 10.162,8.7 10.085,8.692 10.009,8.684 9.933,8.752 9.764,8.752 c -0.168,0 -0.279,0.067 -0.347,0 C 9.349,8.684 9.068,8.65 9.042,8.692 9.008,8.749 8.941,8.751 9.008,8.87 9.077,8.988 9.128,9.056 9.187,9.048 9.246,9.04 9.449,9.031 9.475,9.099 9.5,9.167 9.569,9.226 9.712,9.184 9.857,9.142 9.975,9.116 10.008,9.065 c 0.033,-0.051 0.263,-0.059 0.263,-0.059 0,0 0.187,-0.145 0.12,-0.204 z m 9.723,11.662 c -0.159,-0.045 -0.177,0.166 -0.304,0.306 -0.128,0.141 -0.267,0.254 -0.317,0.241 -0.052,-0.013 -0.331,0.089 -0.242,0.279 0.089,0.191 0.076,0.382 -0.013,0.472 -0.089,0.088 0.076,0.342 0.052,0.482 -0.026,0.139 0.037,0.229 0.215,0.229 0.178,0 0.242,-0.064 0.318,-0.229 0.076,-0.166 0.088,-0.331 0.164,-0.47 0.077,-0.141 0.141,-0.434 0.179,-0.51 0.038,-0.075 0.114,-0.316 0.102,-0.457 -0.014,-0.138 -0.064,-0.318 -0.154,-0.343 z m 4.615,-3.266 c -0.083,0.037 -0.153,0.47 0,0.521 0.152,0.052 0.241,-0.202 0.191,-0.267 -0.052,-0.062 -0.077,-0.305 -0.191,-0.254 z M 11.931,10.412 c 0.127,0.051 0.394,0.102 0.292,0.153 -0.102,0.051 -0.28,0.19 -0.305,0.267 -0.025,0.077 0.216,0.153 0.216,0.153 0,0 -0.077,0.089 -0.013,0.114 0.063,0.025 0.102,-0.089 0.203,-0.089 0.101,0 0.304,0.063 0.406,0.063 0.103,0 0.267,-0.14 0.254,-0.229 -0.013,-0.089 -0.14,-0.229 -0.254,-0.28 -0.113,-0.051 -0.241,-0.28 -0.317,-0.331 C 12.337,10.182 12.489,10.055 12.4,9.966 12.31,9.877 12.247,9.89 12.145,9.826 12.043,9.763 11.954,9.839 11.891,9.915 c -0.063,0.076 -0.14,-0.013 -0.217,0.012 -0.102,0.035 -0.063,0.166 -0.012,0.229 0.052,0.065 0.142,0.205 0.269,0.256 z m -0.623,0.546 c 0.101,0.013 0.217,-0.063 0.305,-0.101 0.088,-0.038 0.216,-0.114 0.216,-0.229 0,-0.114 -0.025,-0.216 -0.077,-0.267 -0.051,-0.051 -0.14,-0.064 -0.216,-0.051 -0.115,0.02 -0.127,0.14 -0.203,0.14 -0.076,0 -0.165,0.025 -0.14,0.114 0.025,0.089 0.077,0.152 0,0.19 -0.076,0.039 0.012,0.192 0.115,0.204 z m 3.406,2.059 c 0.064,0.025 0.114,0.102 0.165,0.114 0.052,0.013 0.217,0 0.167,-0.127 -0.05,-0.127 -0.167,-0.127 -0.204,-0.127 -0.038,0 -0.203,-0.038 -0.267,0 -0.047,0.028 0.075,0.115 0.139,0.14 z m -0.572,-0.343 c 0.064,-0.089 -0.051,-0.217 -0.114,-0.217 -0.12,0 -0.178,0.191 -0.103,0.254 0.077,0.065 0.153,0.052 0.217,-0.037 z m 6.671,-4.639 c 0.141,0.076 0.339,0.107 0.433,0.013 C 21.322,7.972 21.259,7.844 21.196,7.832 21.132,7.819 21.092,7.717 21.258,7.629 21.423,7.54 21.601,7.425 21.792,7.4 c 0.19,-0.025 0.622,-0.038 0.774,0 0.152,0.039 0.382,-0.166 0.445,-0.254 0.063,-0.088 -0.203,-0.152 -0.279,-0.051 -0.077,0.102 -0.444,0.076 -0.521,0.051 -0.076,-0.025 -0.686,0.102 -0.812,0.102 -0.128,0 -0.179,0.152 -0.356,0.229 -0.179,0.076 -0.42,0.191 -0.509,0.229 -0.088,0.038 -0.177,0.19 -0.101,0.216 0.076,0.025 0.241,0.037 0.38,0.113 z m -7.624,4.639 c 0.025,-0.051 -0.039,-0.153 -0.127,-0.013 -0.03,0.049 0.102,0.064 0.127,0.013 z m 4.613,5.91 c 0.063,0.102 -0.14,0.431 -0.254,0.407 -0.113,-0.027 -0.076,-0.318 -0.038,-0.382 0.038,-0.064 0.259,-0.08 0.292,-0.025 z M 17.307,9.458 C 17.37,9.28 17.726,9.496 17.662,9.585 17.599,9.675 17.264,9.579 17.307,9.458 z m -0.432,2.822 c -0.077,-0.025 0.025,-0.178 0.102,-0.229 0.075,-0.051 0.164,-0.178 0.241,-0.305 0.076,-0.127 0.178,-0.14 0.241,-0.127 0.063,0.013 0.203,0.241 0.241,0.318 0.038,0.076 0.165,-0.026 0.217,-0.051 0.05,-0.025 0.127,-0.102 0.14,-0.165 0.013,-0.063 0.127,-0.102 0.254,-0.102 0.127,0 0.013,0.102 -0.076,0.127 -0.09,0.025 -0.038,0.077 0.113,0.127 0.153,0.051 0.293,0.191 0.459,0.279 0.165,0.089 0.19,0.267 0.088,0.292 -0.101,0.025 -0.406,0.051 -0.521,0.038 -0.114,-0.013 -0.254,-0.127 -0.419,-0.153 -0.165,-0.025 -0.369,-0.013 -0.433,0.077 -0.064,0.09 -0.292,0.05 -0.395,0.05 -0.102,0 -0.228,0.127 -0.253,0.077 0.001,0.001 0.077,-0.227 0.001,-0.253 z m 3.507,-0.216 c 0.076,0.05 0.102,0.127 0.152,0.203 0.052,0.076 0.14,0.05 0.203,0.114 0.063,0.064 -0.178,0.14 -0.075,0.216 0.101,0.077 0.151,0.381 0.165,0.458 0.013,0.076 -0.279,0.114 -0.369,0.102 -0.089,-0.013 -0.354,-0.102 -0.445,-0.127 -0.089,-0.026 -0.139,-0.343 -0.025,-0.331 0.116,0.013 0.141,-0.025 0.267,-0.139 0.128,-0.115 -0.189,-0.166 -0.278,-0.191 -0.089,-0.025 -0.268,-0.305 -0.331,-0.394 -0.062,-0.089 -0.014,-0.228 0.141,-0.331 0.076,-0.051 0.279,0.063 0.381,0 0.101,-0.063 0.203,-0.14 0.241,-0.165 0.039,-0.025 0.293,0.038 0.33,0.114 0.039,0.076 0.191,0.191 0.141,0.229 -0.052,0.038 -0.281,0.076 -0.356,0 -0.075,-0.077 -0.255,0.012 -0.268,0.152 -0.014,0.141 0.051,0.039 0.126,0.09 z m 7.054,5.326 c 0.001,0.002 0.004,0.002 0.005,0.004 -0.022,0.187 -0.054,0.37 -0.085,0.554 -0.015,-0.012 -0.034,-0.025 -0.047,-0.036 -0.103,-0.09 -0.254,-0.128 -0.318,-0.115 -0.157,0.032 0.229,0.305 0.267,0.342 0.009,0.009 0.031,0.03 0.062,0.058 -1.029,5.312 -5.709,9.338 -11.319,9.338 -4.123,0 -7.736,-2.18 -9.776,-5.441 0.123,-0.016 0.24,-0.016 0.28,-0.076 C 6.556,21.941 6.607,21.777 6.683,21.687 6.76,21.598 6.848,21.458 6.81,21.395 6.771,21.331 6.911,21.051 6.898,20.976 6.885,20.9 6.771,20.72 6.962,20.569 7.153,20.418 7.356,20.187 7.369,20.125 7.381,20.062 7.535,19.794 7.521,19.667 7.509,19.54 7.369,19.387 7.281,19.349 7.191,19.312 7.001,19.299 6.925,19.198 6.848,19.095 6.633,18.995 6.557,19.02 6.481,19.045 6.353,19.07 6.252,19.005 6.15,18.943 5.985,18.866 5.922,18.816 5.857,18.766 5.693,18.728 5.617,18.728 c -0.077,0 -0.065,-0.052 -0.178,0.101 -0.114,0.153 0,0.204 -0.204,0.177 C 5.031,18.983 5.26,18.97 5.376,18.817 5.489,18.665 5.363,18.575 5.235,18.614 5.109,18.652 5.197,18.729 4.994,18.767 4.791,18.803 4.791,18.677 4.918,18.652 5.045,18.627 5.273,18.513 5.273,18.462 5.273,18.411 5.248,18.271 5.146,18.271 5.044,18.271 5.069,18.145 4.917,17.98 4.825,17.879 4.721,17.816 4.618,17.776 4.528,17.197 4.468,16.609 4.468,16.005 4.468,13.161 5.507,10.559 7.219,8.547 7.243,8.527 7.267,8.513 7.288,8.511 7.372,8.502 7.598,8.486 7.798,8.452 8,8.418 8.216,8.291 8.287,8.299 8.356,8.307 8.528,8.307 8.473,8.257 8.417,8.2 8.339,8.082 8.223,8.082 c -0.116,0 -0.008,-0.186 0.023,-0.186 0.03,0 0.186,0.025 0.178,0.11 C 8.417,8.091 8.471,8.2 8.625,8.167 8.781,8.133 8.757,8.005 8.727,7.972 8.695,7.938 8.672,7.853 8.642,7.794 8.611,7.734 8.619,7.658 8.782,7.641 8.944,7.625 9.168,7.708 9.16,7.573 9.152,7.438 9.16,7.293 9.206,7.217 9.253,7.142 9.354,7.09 9.299,7.065 9.246,7.04 9.176,7.099 9.121,6.972 9.067,6.845 9.168,6.752 9.229,6.701 9.249,6.686 9.296,6.641 9.353,6.589 11.234,5.257 13.524,4.466 16,4.466 c 3.213,0 6.122,1.323 8.214,3.45 -0.008,0.022 -0.01,0.052 -0.031,0.056 C 24.106,7.985 24.017,8.035 24.004,7.921 23.991,7.807 23.991,7.59 23.902,7.718 c -0.089,0.127 -0.127,0.127 -0.127,0.191 0,0.063 0.076,0.127 0.051,0.241 -0.026,0.114 -0.026,0.191 0.014,0.191 0.036,0 0.126,-0.115 0.239,-0.141 0.116,-0.025 0.319,-0.088 0.332,0.026 0.013,0.115 0.139,0.152 0.013,0.203 C 24.296,8.48 24.157,8.455 24.131,8.378 24.106,8.301 24.017,8.301 23.928,8.365 23.84,8.428 23.649,8.657 23.649,8.657 c 0,0 -0.306,0.139 -0.343,0.114 -0.04,-0.025 0.101,-0.165 0.203,-0.228 0.102,-0.064 0.178,-0.204 0.14,-0.242 C 23.611,8.263 23.561,8.022 23.586,7.958 23.611,7.895 23.725,7.806 23.599,7.742 23.472,7.679 23.382,7.602 23.281,7.564 23.18,7.526 23.065,7.716 22.976,7.768 22.887,7.819 22.9,7.882 22.785,7.895 c -0.114,0.013 -0.189,0.165 0,0.254 0.191,0.089 0.255,0.152 0.204,0.204 -0.051,0.051 -0.267,-0.025 -0.267,-0.025 0,0 -0.165,-0.076 -0.268,-0.076 -0.101,0 -0.229,-0.063 -0.33,-0.076 C 22.022,8.163 21.818,8.163 21.769,8.214 21.718,8.265 21.59,8.417 21.489,8.366 21.388,8.315 21.388,8.264 21.248,8.315 21.108,8.366 20.969,8.277 20.893,8.353 20.816,8.429 20.88,8.429 20.638,8.353 20.397,8.277 20.449,8.404 20.219,8.442 19.989,8.48 19.851,8.404 19.787,8.48 19.723,8.557 19.634,8.697 19.597,8.607 19.559,8.519 19.723,8.366 19.659,8.315 19.597,8.264 19.329,8.29 19.292,8.328 19.253,8.366 19.278,8.506 19.303,8.557 19.329,8.607 19.367,8.811 19.292,8.773 19.215,8.735 19.228,8.607 19.151,8.621 19.075,8.634 18.986,8.672 18.948,8.698 18.91,8.723 18.757,8.723 18.719,8.774 18.682,8.825 18.733,8.965 18.668,8.977 18.605,8.99 18.554,9.041 18.414,8.952 18.274,8.863 18.274,8.914 18.236,8.94 18.198,8.965 18.02,9.067 18.007,8.952 17.994,8.838 18.032,8.8 17.918,8.723 17.803,8.647 17.892,8.647 18.045,8.698 c 0.152,0.05 0.343,0.075 0.622,-0.013 0.28,-0.089 0.395,-0.127 0.28,-0.178 C 18.832,8.457 18.718,8.406 18.541,8.38 18.362,8.355 18.121,8.355 17.841,8.253 17.562,8.151 17.498,8.113 17.384,8.088 17.269,8.062 16.571,7.948 16.252,7.999 c -0.317,0.051 -1.193,0.28 -1.245,0.318 -0.052,0.038 -0.128,0.19 -0.292,0.318 -0.165,0.127 -0.47,0.419 -0.712,0.47 -0.241,0.051 -0.521,0.254 -0.521,0.305 0,0.051 0.101,0.242 0.076,0.28 -0.025,0.038 0.05,0.229 0.191,0.28 0.139,0.05 0.381,0.038 0.393,-0.039 0.014,-0.076 0.204,-0.241 0.217,-0.127 0.013,0.115 0.14,0.292 0.114,0.368 -0.025,0.077 0,0.153 0.09,0.14 0.088,-0.012 0.559,-0.114 0.559,-0.114 0,0 0.153,-0.064 0.127,-0.166 C 15.223,9.931 15.415,9.791 15.452,9.753 15.49,9.715 15.63,9.562 15.466,9.512 15.299,9.461 15.173,9.448 15.351,9.296 c 0.178,-0.152 0.292,0 0.521,-0.229 0.229,-0.229 -0.051,-0.292 0.191,-0.305 0.241,-0.013 0.496,-0.025 0.444,0.051 -0.05,0.076 -0.342,0.242 -0.508,0.318 -0.166,0.077 -0.14,0.216 -0.076,0.292 0.063,0.076 0.09,0.254 0.204,0.229 0.113,-0.025 0.254,-0.114 0.38,-0.101 0.128,0.012 0.383,-0.013 0.42,-0.013 0.039,0 0.216,0.178 0.114,0.203 -0.101,0.025 -0.229,0.013 -0.445,0.025 -0.215,0.013 -0.456,0.013 -0.456,0.051 0,0.039 0.292,0.127 0.19,0.191 -0.102,0.063 -0.203,-0.013 -0.331,-0.026 -0.127,-0.012 -0.203,0.166 -0.241,0.267 -0.039,0.102 0.063,0.28 -0.127,0.216 -0.191,-0.063 -0.331,-0.063 -0.381,-0.038 -0.051,0.025 -0.203,0.076 -0.331,0.114 -0.126,0.038 -0.076,-0.063 -0.242,-0.063 -0.164,0 -0.164,0 -0.164,0 l -0.103,0.013 c 0,0 -0.101,-0.063 -0.114,-0.165 -0.013,-0.102 0.05,-0.216 -0.013,-0.241 -0.064,-0.026 -0.292,0.012 -0.33,0.088 -0.038,0.076 -0.077,0.216 -0.026,0.28 0.052,0.063 0.204,0.19 0.064,0.152 -0.14,-0.038 -0.317,-0.051 -0.419,0.026 -0.101,0.076 -0.279,0.241 -0.279,0.241 0,0 -0.318,0.025 -0.318,0.102 0,0.077 0,0.178 -0.114,0.191 -0.115,0.013 -0.268,0.05 -0.42,0.076 -0.153,0.025 -0.139,0.088 -0.317,0.102 -0.178,0.014 -0.204,0.089 -0.038,0.114 0.165,0.025 0.418,0.127 0.431,0.241 0.014,0.114 -0.013,0.242 -0.076,0.356 -0.043,0.079 -0.305,0.026 -0.458,0.026 -0.152,0 -0.456,-0.051 -0.584,0 -0.127,0.051 -0.102,0.305 -0.064,0.419 0.039,0.114 -0.012,0.178 -0.063,0.216 -0.051,0.038 -0.065,0.152 0,0.204 0.063,0.051 0.114,0.165 0.166,0.178 0.051,0.013 0.215,-0.038 0.279,0.025 0.064,0.064 0.127,0.216 0.165,0.178 0.039,-0.038 0.089,-0.203 0.153,-0.166 0.064,0.039 0.216,-0.012 0.331,-0.025 0.115,-0.013 0.177,-0.14 0.292,-0.204 0.114,-0.063 0.05,-0.063 0.013,-0.14 -0.038,-0.076 0.114,-0.165 0.204,-0.254 0.088,-0.089 0.253,-0.013 0.292,-0.115 0.038,-0.102 0.051,-0.279 0.151,-0.267 0.103,0.013 0.243,0.076 0.331,0.076 0.089,0 0.279,-0.14 0.332,-0.165 0.05,-0.025 0.241,-0.013 0.267,0.102 0.025,0.114 0.241,0.254 0.292,0.279 0.051,0.025 0.381,0.127 0.433,0.165 0.05,0.038 0.126,0.153 0.152,0.254 0.025,0.102 0.114,0.102 0.128,0.013 0.012,-0.089 -0.065,-0.254 0.025,-0.242 0.088,0.013 0.191,-0.026 0.191,-0.026 0,0 -0.243,-0.165 -0.331,-0.203 -0.088,-0.038 -0.255,-0.114 -0.331,-0.241 -0.076,-0.127 -0.267,-0.153 -0.254,-0.279 0.013,-0.127 0.191,-0.051 0.292,0.051 0.102,0.102 0.356,0.241 0.445,0.33 0.088,0.089 0.229,0.127 0.267,0.242 0.039,0.114 0.152,0.241 0.19,0.292 0.038,0.051 0.165,0.331 0.204,0.394 0.038,0.063 0.165,-0.012 0.229,-0.063 0.063,-0.051 0.179,-0.076 0.191,-0.178 0.013,-0.102 -0.153,-0.178 -0.203,-0.216 -0.051,-0.038 0.127,-0.076 0.191,-0.127 0.063,-0.05 0.177,-0.14 0.228,-0.063 0.051,0.077 0.026,0.381 0.051,0.432 0.025,0.051 0.279,0.127 0.331,0.191 0.05,0.063 0.267,0.089 0.304,0.051 0.039,-0.038 0.242,0.026 0.294,0.038 0.049,0.013 0.202,-0.025 0.304,-0.05 0.103,-0.025 0.204,-0.102 0.191,0.063 -0.013,0.165 -0.051,0.419 -0.179,0.546 -0.127,0.127 -0.076,0.191 -0.202,0.191 -0.06,0 -0.113,0 -0.156,0.021 -0.041,-0.065 -0.098,-0.117 -0.175,-0.097 -0.152,0.038 -0.344,0.038 -0.47,0.19 -0.128,0.153 -0.178,0.165 -0.204,0.114 -0.025,-0.051 0.369,-0.267 0.317,-0.331 -0.05,-0.063 -0.355,-0.038 -0.521,-0.038 -0.166,0 -0.305,-0.102 -0.433,-0.127 -0.126,-0.025 -0.292,0.127 -0.418,0.254 -0.128,0.127 -0.216,0.038 -0.331,0.038 -0.115,0 -0.331,-0.165 -0.331,-0.165 0,0 -0.216,-0.089 -0.305,-0.089 -0.088,0 -0.267,-0.165 -0.318,-0.165 -0.05,0 -0.19,-0.115 -0.088,-0.166 0.101,-0.05 0.202,0.051 0.101,-0.229 -0.101,-0.279 -0.33,-0.216 -0.419,-0.178 -0.088,0.039 -0.724,0.025 -0.775,0.025 -0.051,0 -0.419,0.127 -0.533,0.178 -0.116,0.051 -0.318,0.115 -0.369,0.14 -0.051,0.025 -0.318,-0.051 -0.433,0.013 -0.151,0.084 -0.291,0.216 -0.33,0.216 -0.038,0 -0.153,0.089 -0.229,0.28 -0.077,0.19 0.013,0.355 -0.128,0.419 -0.139,0.063 -0.394,0.204 -0.495,0.305 -0.102,0.101 -0.229,0.458 -0.355,0.623 -0.127,0.165 0,0.317 0.025,0.419 0.025,0.101 0.114,0.292 -0.025,0.471 -0.14,0.178 -0.127,0.266 -0.191,0.279 -0.063,0.013 0.063,0.063 0.088,0.19 0.025,0.128 -0.114,0.255 0.128,0.369 0.241,0.113 0.355,0.217 0.418,0.367 0.064,0.153 0.382,0.407 0.382,0.407 0,0 0.229,0.205 0.344,0.293 0.114,0.089 0.152,0.038 0.177,-0.05 0.025,-0.09 0.178,-0.104 0.355,-0.104 0.178,0 0.305,0.04 0.483,0.014 0.178,-0.025 0.356,-0.141 0.42,-0.166 0.063,-0.025 0.279,-0.164 0.443,-0.063 0.166,0.103 0.141,0.241 0.23,0.332 0.088,0.088 0.24,0.037 0.355,-0.051 0.114,-0.09 0.064,-0.052 0.203,0.025 0.14,0.075 0.204,0.151 0.077,0.267 -0.128,0.113 -0.051,0.293 -0.128,0.47 -0.076,0.178 -0.063,0.203 0.077,0.278 0.14,0.076 0.394,0.548 0.47,0.638 0.077,0.088 -0.025,0.342 0.064,0.495 0.089,0.151 0.178,0.254 0.077,0.331 -0.103,0.075 -0.28,0.216 -0.292,0.47 -0.012,0.254 0.051,0.431 0.102,0.521 0.051,0.09 0.177,0.331 0.241,0.419 0.064,0.089 0.14,0.305 0.152,0.445 0.013,0.14 -0.024,0.306 0.039,0.381 0.064,0.076 0.102,0.191 0.216,0.292 0.115,0.103 0.152,0.318 0.152,0.318 0,0 0.039,0.089 0.051,0.229 0.012,0.14 0.025,0.228 0.152,0.292 0.126,0.063 0.215,0.076 0.28,0.013 0.063,-0.063 0.381,-0.077 0.546,-0.063 0.165,0.013 0.355,-0.075 0.521,-0.19 0.166,-0.115 0.407,-0.419 0.496,-0.508 0.089,-0.09 0.292,-0.255 0.268,-0.356 -0.025,-0.101 -0.077,-0.203 0.024,-0.254 0.102,-0.052 0.344,-0.152 0.356,-0.229 0.013,-0.077 -0.09,-0.395 -0.115,-0.457 -0.024,-0.064 0.064,-0.18 0.165,-0.306 0.103,-0.128 0.421,-0.216 0.471,-0.267 0.051,-0.053 0.191,-0.267 0.217,-0.433 0.024,-0.167 -0.051,-0.369 0,-0.457 0.05,-0.09 0.013,-0.165 -0.103,-0.268 -0.114,-0.102 -0.089,-0.407 -0.127,-0.457 -0.037,-0.051 -0.013,-0.319 0.063,-0.345 0.076,-0.023 0.242,-0.279 0.344,-0.393 0.102,-0.114 0.394,-0.47 0.534,-0.496 0.139,-0.025 0.355,-0.229 0.368,-0.343 0.013,-0.115 0.38,-0.547 0.394,-0.635 0.013,-0.09 0.166,-0.42 0.102,-0.497 -0.062,-0.076 -0.559,0.115 -0.622,0.141 -0.064,0.025 -0.241,0.127 -0.446,0.113 -0.202,-0.013 -0.114,-0.177 -0.127,-0.254 -0.012,-0.076 -0.228,-0.368 -0.279,-0.381 -0.051,-0.012 -0.203,-0.166 -0.267,-0.317 -0.063,-0.153 -0.152,-0.343 -0.254,-0.458 -0.102,-0.114 -0.165,-0.38 -0.268,-0.559 -0.101,-0.178 -0.189,-0.407 -0.279,-0.572 -0.021,-0.041 -0.045,-0.079 -0.067,-0.117 0.118,-0.029 0.289,-0.082 0.31,-0.009 0.024,0.088 0.165,0.279 0.19,0.419 0.025,0.14 0.165,0.089 0.178,0.216 0.014,0.128 0.14,0.433 0.19,0.47 0.052,0.038 0.28,0.242 0.318,0.318 0.038,0.076 0.089,0.178 0.127,0.369 0.038,0.19 0.076,0.444 0.179,0.482 0.102,0.038 0.444,-0.064 0.508,-0.102 0.064,-0.038 0.482,-0.242 0.635,-0.255 0.153,-0.012 0.179,-0.115 0.368,-0.152 0.191,-0.038 0.331,-0.177 0.458,-0.28 0.127,-0.101 0.28,-0.355 0.33,-0.444 0.052,-0.088 0.179,-0.152 0.115,-0.253 -0.063,-0.103 -0.331,-0.254 -0.433,-0.268 -0.102,-0.012 -0.089,-0.178 -0.152,-0.178 -0.063,0 -0.051,0.088 -0.178,0.153 -0.127,0.063 -0.255,0.19 -0.344,0.165 -0.089,-0.025 0.026,-0.089 -0.113,-0.203 -0.139,-0.114 -0.192,-0.14 -0.192,-0.228 0,-0.089 -0.278,-0.255 -0.304,-0.382 -0.026,-0.127 0.19,-0.305 0.254,-0.19 0.063,0.114 0.115,0.292 0.279,0.368 0.165,0.076 0.318,0.204 0.395,0.229 0.076,0.025 0.267,-0.14 0.33,-0.114 0.063,0.024 0.191,0.253 0.306,0.292 0.113,0.038 0.495,0.051 0.559,0.051 0.064,0 0.33,0.013 0.381,-0.063 0.051,-0.076 0.089,-0.076 0.153,-0.076 0.062,0 0.177,0.229 0.267,0.254 0.089,0.025 0.254,0.013 0.241,0.179 -0.012,0.164 0.076,0.305 0.165,0.317 0.09,0.012 0.293,-0.191 0.293,-0.191 0,0 0,0.318 -0.012,0.433 -0.014,0.113 0.139,0.534 0.139,0.534 0,0 0.19,0.393 0.241,0.482 0.051,0.089 0.267,0.355 0.267,0.47 0,0.115 0.025,0.293 0.103,0.293 0.076,0 0.152,-0.203 0.24,-0.331 0.091,-0.126 0.116,-0.305 0.153,-0.432 0.038,-0.127 0.038,-0.356 0.038,-0.444 0,-0.09 0.075,-0.166 0.255,-0.242 0.178,-0.076 0.304,-0.292 0.456,-0.407 0.153,-0.115 0.141,-0.305 0.446,-0.305 0.305,0 0.278,0 0.355,-0.077 0.076,-0.076 0.151,-0.127 0.19,0.013 0.038,0.14 0.254,0.343 0.292,0.394 0.038,0.052 0.114,0.191 0.103,0.344 -0.013,0.152 0.012,0.33 0.075,0.33 0.063,0 0.191,-0.216 0.191,-0.216 0,0 0.279,-0.189 0.267,0.013 -0.014,0.203 0.025,0.419 0.025,0.545 0,0.053 0.042,0.135 0.088,0.21 -0.005,0.059 -0.004,0.119 -0.009,0.178 -0.091,0.024 -0.092,0.198 -0.043,0.261 z M 15.947019,2.3594558 c -7.4930781,0 -13.5672591,6.0741809 -13.5672591,13.5672562 0,7.493077 6.074181,13.567258 13.5672591,13.567258 7.493076,0 13.567257,-6.074181 13.567257,-13.567258 0,-7.4930753 -6.074181,-13.5672562 -13.567257,-13.5672562 z",
	container: "M15.5,3.029l-10.8,6.235L4.7,21.735L15.5,27.971l10.8-6.235V9.265L15.5,3.029zM15.5,7.029l6.327,3.652L15.5,14.334l-6.326-3.652L15.5,7.029zM24.988,10.599L16,15.789v10.378c0,0.275-0.225,0.5-0.5,0.5s-0.5-0.225-0.5-0.5V15.786l-8.987-5.188c-0.239-0.138-0.321-0.444-0.183-0.683c0.138-0.238,0.444-0.321,0.683-0.183l8.988,5.189l8.988-5.189c0.238-0.138,0.545-0.055,0.684,0.184C25.309,10.155,25.227,10.461,24.988,10.599z",
	redhat: "M18.1,21.6c0.1,0.1,0.2,0.4,0.1,0.7c-0.1,0.2-0.2,0.3-0.4,0.5c-0.2,0.2-0.7,0.4-1.1,0	c-0.3-0.2-0.4-0.3-0.8-0.2c-0.3,0.1-0.5-0.3-0.3-0.5c0.1-0.3,0.6-0.5,1-0.2c0.3,0.2,0.7,0.5,0.9,0.2C17.9,21.9,18,21.8,18.1,21.6	C18,21.6,18.1,21.6,18.1,21.6L18.1,21.6L18.1,21.6z M14.9,0C6.6,0,0,6.6,0,14.9c0,1.6,0.3,3.2,0.8,4.7h1c0.9,0,1.8-0.3,2.5-0.6	c0.2-0.1,0.4-0.2,0.6-0.2c0.5,0,0.9,0.2,1,0.6c0.2,0.4,0.5,0.6,0.7,0.8c0.2,0.2,0.5,0.3,0.9,0.3c0.2,0,0.5-0.1,0.6-0.3	c0.1-0.3,0-0.4-0.3-0.6c-0.4-0.2-0.5-0.4-0.8-0.8c-0.2-0.4-0.7-0.6-0.8-1.3c-0.1-0.7,0.5-1.5,1.5-1.3c0.8,0.2,1.3,1.1,1.4,1.5	c0.1,0.2,0.5,0.4,0.8,0.1c0.3-0.3,0.6-0.3,0.8,0.1c0.2,0.3,1.5,2.1,2.9,2.1c1.4,0.1,2.3-0.4,2.8-0.3c0.5,0,0.7,0.3,0.9,0.3	c0.5,0.1,0.8-0.4,1.2-0.3c0.4,0,0.9,0.3,1.3,0.3c0.5,0,1.4-0.6,1.3-0.4c0,0.4-0.4,1.1-0.4,1.4c-0.1,0.3,0,0.8-0.2,1.2	c-0.1,0.5-0.6,1-0.7,1.1c-0.4,0.6-0.7,0.8-0.9,1.2c-0.4,0.7-0.9,1.2-1,1.4c-0.2,0.3,1,0,1.4-0.4c0.4-0.4,1-1.4,2-1.6	c0.7-0.2,0.9-0.4,0.8-0.7c0-0.1,0-0.1,0-0.1c0-0.1,0.1-0.2,0.2-0.2c0.7-0.3,1.6-0.5,2.8-0.5c0.7,0,1.2,0.1,1.8,0.2	c1.5-2.4,2.4-5.1,2.4-8.1C29.7,6.6,23.1,0,14.9,0z M27,14.5c-0.8,3.9-7.1,5.2-13.3,3.3c-6-1.8-11.1-5.4-10.5-7.5	C3.5,9.1,5.4,8.5,8,8.9c-0.4,0.8-0.4,1.8,1.3,2.8c2.1,1.1,5.6,2.2,6.6,2.1c0.4-0.1,0.7-0.2,0.4-0.5c-0.4-0.2-0.6-0.7-0.8-1.3	c-0.1-0.5-0.2-0.9-2.5-1.4c-4.8-0.9-4.7-2.3-4.5-3c0,0,0.5-1.9,0.6-2.6c0.2-0.7,0.7-2.3,3.8-1.5c1.8,0.4,2.8-0.1,3.2-0.3	C17.5,2.8,19,3,19.9,3.9s2,3.6,2.6,5.6c0.3,1,0.2,1.5,0.1,1.9c-0.1,0.3-0.2,0.4-0.6,0.9c-0.1,0.1,0,0.3,0.2,0.2	c0.9-0.5,1.1-1.1,1.2-1.6C25.7,11.5,27.3,12.7,27,14.5z M13.8,7c-1.7,0.2-1.9,0.3-2.2,0.7c-0.5,0.5-1-0.7-1-0.7	C10.2,6.9,9.8,6.4,10,5.9c0.3-0.6,0.7-0.4,0.8-0.2c0.1,0.2,0.5,0.6,0.9,0.6s0.9-0.1,1.7-0.1s1.2,0.3,1.2,0.5C14.6,6.8,14.5,7,13.8,7	L13.8,7z M15.6,4.3L15.6,4.3C15.5,4.3,15.5,4.3,15.6,4.3C15.5,4.2,15.5,4.2,15.6,4.3C16,4,16.4,3.9,17,3.8c0.2,0,0.4-0.1,0.5-0.1	s0.1,0,0.1,0c0.9,0,1.7,0.4,1.7,0.9c0,0.5-0.8,0.8-1.8,0.8c-0.3,0-0.6-0.1-0.9-0.2c-0.1,0-0.1-0.1-0.1-0.1c0-0.1,0-0.1,0.1-0.1	c0.6-0.2,0.9-0.4,0.9-0.6c-0.1-0.3-0.9-0.5-1.8-0.4C15.8,4.2,15.7,4.3,15.6,4.3L15.6,4.3z",
	hadoop: "M2.4,15.6C2.8,16.2,3.2,17,3.2,17c-0.1,0.4-0.2,1.4-2.1-0.2c-1-0.9-0.7-1.6-0.4-1.8c0.3-0.2,0.7-0.7,0.8-0.8	c0.1-0.1,0.2-0.3,0.2-0.5C1.7,13.8,2.2,15,2.4,15.6z M18.5,6.6c0-0.2-0.2-0.3-0.4-0.3s-0.4,0.2-0.4,0.4C17.7,6.9,17.8,7,18,7	C18.2,6.9,18.2,6.8,18.5,6.6z M14.8,18.6c0,0,0.6,0.2,1.8,0.2c0.6,0,0.9,0.1,1-0.5c0.1-0.5-0.1-0.6-0.2-0.7s0-1.2,0-1.6	s-0.5-1.5-0.5-1.5C16.5,17.3,15.2,18.2,14.8,18.6z M2,8.8c0,0-0.6,0.6-1,0.5C0.6,9.2,0.5,8.6,0.5,8.6s0.3-0.2,0.3-0.6	c0.1-0.3,0-0.5,0.1-0.8s0.2-0.7,0.2-0.7c-1.5,1.1-1.2,1.7-1,2.1c0.2,0.4,0.1,0.9,0.6,1c0.4,0.2,1-0.2,1-0.2L2,8.8z M26.4,4.2	C26.6,4.6,27.1,6.4,27,8c0,1.4-0.5,2.5-1,3.1c-2.4,3.1-7,0.3-7,0.3c0.1,0.8,0,1.1,0,1.1c-0.1,0.4-0.4,1-0.2,1.4	c0.5,0.7,1.4,0.2,1.3,0.2c-0.9,0.2-1-0.3-1-0.3s0.6,0.2,1.1,0.1c0.5-0.2,0.6-1.2,0.7-1.1c0.1,0.1,0.3,0.1,0.3,0.1s-0.2,1.6-1.8,1.8	c-0.6,0.1-1.1-0.5-1.3-0.7c-0.2-0.2-1-0.8-1-0.8c-0.2-0.1-0.6-0.2-1.1-0.4c-0.5-0.2-0.9-0.6-0.9-0.6c0.2,0.6,1.4,1.1,1.4,1.2	c0,0-0.3,1.6-0.7,2.8c-0.5,1.3-1.2,1.9-1.4,2.1c-0.3,0.3-0.9,0.7-1.1,1c-0.2,0.2-0.7,0.5-0.8,0.6c-0.2,0.2-0.4,0.5-0.4,0.5	c-0.2,0.2-0.7,0.6-1.3,0.2c-0.1-0.1-0.5-0.5-0.7-0.9c-0.3-0.4-0.5-1-0.6-1.1c-0.1-0.3,0-0.4,0.1-0.6c0.1-0.1,1-0.6,1.1-0.7	c0.1-0.1,0.2-0.1,0.2,0s0.2,0.3,0.2,0.2s-0.1-0.6-0.1-0.9c0-0.3,0.1-1,0.1-0.9c0,0.1-0.3,1-0.4,1c-0.2,0-1.1,0.2-1.6,0.2	s-1.4,0-1.5-0.2c-0.2-0.2-0.3-1-0.3-1s0.1,1.6,0,2s-0.2,0.6-0.2,0.6c-0.1,0.2-0.2,0.3-0.4,0.6s-0.2,0.3-0.2,0.8	c0,0.6-0.1,0.6-0.8,0.6c-0.7,0.1-2.1-0.4-2.4-0.6s-0.3-0.4-0.2-0.8C3.4,18.5,3.7,17,3.7,17c-1.8-2.4-3-5.7-1-9	C4.3,5.4,7,4.7,8.4,4.6c0,0-1.9,1.8-2.6,3.4C5.5,8.9,5.6,9.6,6,9.9c0.5,0.2,1.2,1.7,1.2,1.7s-0.5,1-0.3,1.2c0,0,0.2,0.2,0.6,0.6	c0.4,0.3,1,0.8,1.8,0.7c0.6,0,2.1-0.9,2.7-1.2c0.6-0.3,1.6-0.3,1.6-0.4c0,0,0.4-0.8,0.5-1.8c0.1-1.1-0.2-2.4-0.3-2.7	c-0.1-0.5-0.2-2.5-0.2-2.5S13.3,6.6,13.4,8c0,0.5,0.2,1.9,0.2,2.3c0,1.4-0.5,1.8-0.5,1.8c-0.9,0-2.7,1-3.2,1.3	c-0.2,0.2-0.6,0.2-0.9,0.2c-0.3,0-0.6-0.1-0.8-0.2c-0.5-0.2-0.9-0.9-0.9-0.9c-0.1-0.2,0.1-0.8,0.4-1.3C8.4,10.1,9.2,8.9,9.1,9	C8.9,9.1,7.5,11,7.5,11c0-0.3-0.7-1.1-1.1-1.7C6.2,9.1,6.3,8.7,6.3,8.6c0.1-0.2,0.3-1,0.9-1.7c1.2-1.5,3-3.4,3.3-3.7	c0.4-0.3,0.7-0.3,1-0.4c0.2-0.1,2.4-0.5,2.2-0.4c-0.2,0-1.8,0.1-1.8,0c0.1-0.2,0.6-0.9,1.6-1.4c1-0.6,2.4-1,3.4-1	c1.2,0,2.5,0.9,3.4,1.6c0.6,0.6,1.1,0.9,1,0.9c-0.2-0.1-0.5,0.1-0.5,0.1c0.2,0,1,0.2,1.5,0.6c0.5,0.5,0.8,1.2,1,1.4	c-0.2-0.2-0.7-0.3-1-0.1c-0.2,0.1-0.7,0.2-0.7,0.2H22c-0.1,0.1,0,0.3,0,0.4V5.1C22,5,22.2,5,22.4,5s0.2,0.2,0.2,0.3	c-0.2,0-0.2,0-0.5,0.1l0,0l0,0c0,0-0.3,0.2-0.2,0.1s1-0.1,1.2,0c0.1,0.2,0.1,0.6,0.1,0.6c-0.6-0.3-1.5-0.2-1.8,0.5	c-0.1,0.2-0.4,1-0.4,1c0.2-0.2,0.3-0.7,0.7-1c0.3-0.3,1-0.3,0.8-0.2C22.4,6.3,22,6.8,22,7c0,0.2-0.2,1.2-0.2,1.2	C22,8,22.1,7,22.5,6.6c0.4-0.3,0.6-0.2,0.6-0.2c0.2,0.6-0.2,2.3-0.2,2.3c0.2-0.2,0.4-0.7,0.5-1.4c0.1-0.7,0.1-1.6,0-1.8	c-0.1-0.4,0.2-0.6,0.3-0.6c0.3-0.2,0.6-0.2,0.9-0.5c0.3-0.2,0.6-0.8,0.8-0.9C25.7,3.4,26.1,3.4,26.4,4.2z M13.2,3.5	c-0.2,0-0.5,0.1-0.7,0.1c-0.6,0.1-1-0.1-1.4,0.3c-0.6,0.5-0.8,1.4-1.1,2.5c0,0.1,0,0.1-0.1,0.2v0.1c0.1-0.2,0.4-1,0.7-1.6	s0.7-0.9,0.8-1c-0.1,0-0.2,0.2-0.2,0.6c-0.1,0.5,0.1,1,0.1,0.7c0-0.4,0.4-1.2,0.7-1.4C12.4,3.8,12.9,3.6,13.2,3.5z M17.5,3.4	c-0.2,0.1-1,0.2-1.2,0.6C16,4.3,16,5.1,16,5.1s0.1-0.6,0.4-1C16.9,3.7,17.5,3.4,17.5,3.4z M19.4,10.9c-0.1,0-0.7,0-1,0.2	c-0.2,0.2-0.2,0.9-0.2,1l0,0l0,0c0-0.1,0.2-0.5,0.5-0.7C18.9,11.2,19.4,10.9,19.4,10.9z M20,6c0,0-0.3,0-0.8,0.2	c0-0.3-0.2-0.6-0.6-0.8c0.2-0.1,0.4-0.2,0.5-0.3c0,0-0.5,0.1-1,0.3c-0.3,0-0.6,0.2-0.6,0.5c-0.2,0.2-0.6,0.6-0.8,0.9	c0.2,0,0.6-0.3,0.7-0.5c0,0.4,0.2,0.6,0.6,0.8c-0.2,0.2-0.3,0.4-0.3,0.5c0,0,0.5-0.5,1-0.9C19.2,6.2,20,6,20,6z M26,3.6L26,3.6	c-0.1,0.1-0.2,0.2-0.2,0.2c-0.2,0.2-0.2,0.6-0.6,1c-0.7,0.5-1.2,0.4-1.3,0.4c0.2,0.1,0.5,0.2,0.8,0.1C25.7,4.9,25.9,3.8,26,3.6z",
	centos: "M13,11.5l-0.9-0.9V3.3V3h-0.2H10l3-3l3,3h-1.9H14v0.2v7.4L13,11.5z M10.6,12.1H3.3H3.1v-0.2V9.9L0,13	l3.1,3.1v-2v-0.2h0.2h7.4l0.9-0.9L10.6,12.1z M6.6,5.8l0.2-0.2l2.1-2.1H3.5v5.4l2.1-2.1l0.2-0.2l0.2,0.2l4.9,4.8h0.9v-0.8L6.8,5.9	L6.6,5.8z M7.3,5.8l4.4,4.4V3.5H9.5L7.3,5.8z M3.5,9.5v2.1h6.6L5.8,7.3L3.5,9.5z M12.1,15.4v7.3V23h-0.2h-2L13,26l3.1-3.1h-1.9H14	v-0.2v-7.2L13,14.5L12.1,15.4z M6.8,20.5l-0.2-0.2l0.2-0.2l4.9-4.9v-0.9h-0.8l-4.9,4.9l-0.2,0.2l-0.2-0.2l-2.1-2.1v5.3h5.3L6.8,20.5	z M10.2,14.4H3.5v2.2l2.2,2.2L10.2,14.4z M9.5,22.5h2.2v-6.7l-4.4,4.4L9.5,22.5z M19.3,5.6l0.2,0.2l-0.2,0.2l-4.9,4.9v0.8h0.9	l4.9-4.9l0.2-0.2l0.2,0.2l2.1,2.1V3.5h-5.4L19.3,5.6z M16.5,3.5h-2.1v6.7l4.4-4.4L16.5,3.5z M23,12.1h-0.2h-7.3L14.5,13l0.9,0.9h7.4	H23v0.2V16l3-3l-3-3v1.9V12.1z M15.9,11.6h6.7V9.5l-2.3-2.3L15.9,11.6z M19.4,20.3l-0.2,0.2l-2.1,2.1h5.4v-5.4l-2.1,2.1l-0.2,0.2	l-0.2-0.2l-4.9-4.9h-0.8v1l4.8,4.8L19.4,20.3z M18.8,20.3l-4.3-4.3v6.6h2.1L18.8,20.3z M22.6,16.5v-2.2h-6.7l4.4,4.4L22.6,16.5z",
	fedora: "M11,0C4.9,0,0,4.9,0,11v8.5C0,20.9,1.1,22,2.5,22H11c6.1,0,11-4.9,11-11C22,4.9,17.1,0,11,0z M14.2,5	c-1.5,0-2.8,1.3-2.8,2.8v2.4c0,0.1,0,0.2,0.1,0.2v0.1h0.1v0h0.1c0.1,0.1,0.2,0.1,0.3,0.1l1.8,0c0.6,0,1.1,0.5,1.1,1.1	c0,0.6-0.5,1.1-1.1,1.1h-2.2l0,0c0,0,0,0.1,0,0.1l0,2.7c0,2.8-2.3,5.1-5.1,5.1c-0.4,0-0.7,0-1.1-0.2c-0.6-0.2-1-0.6-1-1.1	c0-0.6,0.5-1.1,1.1-1.1c0.2,0,0.3,0,0.4,0c0.1,0,0.3,0,0.6,0c1.5,0,2.8-1.3,2.8-2.8v-2.4c0-0.1,0-0.2-0.1-0.2L9,13l0,0v0v0	c-0.1-0.1-0.2-0.1-0.3-0.1H6.9c-0.6,0-1.1-0.5-1.1-1.1c0-0.6,0.6-1.1,1.2-1.1c0,0,0,0,0,0H9v0c0,0,0.1,0,0.1-0.1l0-2.7	c0-2.8,2.3-5.1,5.1-5.1c0.4,0,0.7,0,1.1,0.2c0.6,0.2,1,0.6,1,1.1c0,0.6-0.5,1.1-1.1,1.1c-0.2,0-0.3,0-0.4,0C14.7,5,14.5,5,14.2,5z	 M1.1,15.7c0-2.9,2.3-5.1,5.2-5.1c-0.4,0.2-0.7,0.6-0.7,1.1c0,0.6,0.4,1,0.9,1.2H6.3c-1.5,0-2.7,1.2-2.7,2.7c0,1.2,0.8,2.2,1.8,2.6	c0,0,0,0-0.1,0c-0.8,0-1.3,0.5-1.3,1.3c0,0.5,0.4,1,1,1.2C2.8,20.1,1.1,18.1,1.1,15.7z M14.3,12.8c0.4-0.2,0.6-0.6,0.6-1.1	c0-0.6-0.4-1-0.9-1.2h0.1c1.5,0,2.7-1.2,2.7-2.7c0-1.2-0.8-2.2-1.8-2.6c0,0,0,0,0.1,0c0.8,0,1.3-0.5,1.3-1.3c0-0.5-0.4-1-1-1.2	c2.3,0.6,3.9,2.6,3.9,5C19.4,10.6,17.1,12.7,14.3,12.8z",
	suse: "M1.2,17.8h1.2c0,1,0.7,1.4,1.7,1.4c1,0,1.4-0.5,1.4-1c0-0.5-0.3-0.7-0.6-0.8	c-0.5-0.2-1-0.3-1.9-0.5c-1.1-0.3-1.5-1-1.5-1.7c0-1.3,1.2-1.9,2.4-1.9c1.4,0,2.5,0.7,2.5,2.1H5.2c-0.1-0.8-0.6-1.2-1.4-1.2	c-0.5,0-1.2,0.2-1.2,0.9c0,0.5,0.3,0.7,0.8,0.8c0.1,0,1.5,0.4,1.9,0.5c0.9,0.3,1.3,1,1.3,1.7c0,1.5-1.3,2.1-2.6,2.1	C2.4,20.1,1.2,19.4,1.2,17.8L1.2,17.8z M12.8,15.2h-1V18c0,0.7-0.3,1.3-1.2,1.3c-0.6,0-0.9-0.3-0.9-1.1v-2.9h-1v3	c0,1.2,0.5,1.8,1.8,1.8c0.5,0,1.1-0.3,1.3-0.8h0V20h1V15.2L12.8,15.2z M15,17.8c0,1.6,1.2,2.3,2.7,2.3c1.3,0,2.6-0.6,2.6-2.1	c0-0.7-0.4-1.4-1.3-1.7c-0.3-0.1-1.8-0.5-1.9-0.5c-0.5-0.1-0.8-0.4-0.8-0.8c0-0.7,0.7-0.9,1.2-0.9c0.8,0,1.4,0.3,1.4,1.2h1.2	c0-1.4-1.2-2.1-2.5-2.1c-1.2,0-2.4,0.6-2.4,1.9c0,0.7,0.3,1.4,1.4,1.7c0.9,0.2,1.5,0.4,2,0.5c0.3,0.1,0.5,0.3,0.5,0.8	c0,0.5-0.4,1-1.4,1c-0.9,0-1.6-0.4-1.6-1.4H15L15,17.8z M22.6,20h4.8v-1h-3.6v-1.9H27v-0.9h-3.3v-1.7h3.6v-1h-4.7V20L22.6,20z	 M0.2,10.7l1.3,0c0.2,0.4,0.5,0.6,1.1,0.7h0c0.4,0,0.6-0.4,0.6-0.7l1.4,0c0.2,1.1-0.2,1.8-1.3,1.9C1.7,12.7,0.7,12.1,0.2,10.7	C0.2,10.8,0.2,10.7,0.2,10.7L0.2,10.7z M2,10.7l0.7,0c0,0.1-0.1,0.2-0.2,0.3C2.3,10.9,2.2,10.8,2,10.7L2,10.7z M7.7,10.7l1.2,0	c0,0.3,0,0.6-0.7,0.6C7.7,11.3,7.7,10.9,7.7,10.7L7.7,10.7z M10.4,10.7h1.2c0,0.1,0,0.2,0,0.3c0,0.1-0.1,0.5-0.6,0.4	C10.5,11.3,10.4,11.1,10.4,10.7L10.4,10.7z M17.8,10.7h1.1c0,0.3,0,0.6-0.4,0.7C17.9,11.4,17.9,11,17.8,10.7L17.8,10.7z M20.4,10.7	h1.1c0,0.4,0,0.5-0.3,0.6C20.9,11.3,20.6,11.2,20.4,10.7L20.4,10.7z M0,8.7h1.9C1.7,8.9,1.5,9.1,1.4,9.4l0,0	c-0.1,0.4-0.1,0.9,0.1,1.3H0.2C0,10.1,0,9.4,0,8.7L0,8.7z M7.5,8.7h1.5c0,0.4,0,0.6-0.1,2v0H7.7c0,0,0,0,0,0L7.5,8.7L7.5,8.7z	 M10.4,8.7h1.4c0,0.1,0,0.2,0,0.4c-0.1,0.6-0.1,0.9-0.2,1.6l-1.2,0c0-0.2,0-0.3,0-0.5c0-0.3,0-1.2,0-1.2C10.4,8.9,10.4,8.8,10.4,8.7 L10.4,8.7z M17.2,8.7h1.4c0,0,0,0,0,0.1c0.1,0.6,0.1,1.2,0.2,1.7c0,0.1,0,0.1,0,0.2h-1.1c0,0,0,0,0-0.1L17.2,8.7L17.2,8.7z	 M19.8,8.7h1.5c-0.2,0.5,0.2,1.5,0.2,1.5c0.1,0.2,0.1,0.4,0.1,0.5h-1.1v0c-0.1-0.3-0.2-0.4-0.2-0.4L19.8,8.7L19.8,8.7z M2.8,10.7H2	C1.8,10.4,1.7,10,1.8,9.6c0.2-0.4,0.6-0.5,1-0.6l0.3-0.1c0.5,0.1,1,0.6,1.4,1.5c0,0.1,0.1,0.2,0.1,0.3l-1.4,0c0-0.5-0.2-1-0.6-0.8	c-0.3,0.1-0.1,0.5,0.1,0.5C2.8,10.4,2.8,10.6,2.8,10.7L2.8,10.7z M1.1,6C0.5,6.9,0.2,7.8,0,8.7h1.9C2,8.6,2.1,8.6,2.2,8.6	c0.2-0.1,0.4-0.1,0.6-0.2C3,7.9,3.5,7.5,4.4,7.1C5.9,6.7,7.2,7,7.5,8.5v0.2h1.5c0-0.1,0-0.1,0-0.2c0.1-0.7,1.4-0.9,1.4,0.2h1.4	c0.1-0.5,0.4-0.7,1.7-0.5c0.9,0.3,1.5,0.1,2.7,0c0.9-0.2,0.8,0,1,0.5l0,0h1.4c-0.1-0.6,0.4-1.8,1.2-0.1l0,0.1h1.5	c0.1-0.2,0.3-0.4,0.6-0.4c0.2,0,0.5-0.1,0.5-0.2c-0.6-0.3-1-0.6-2.2-1.5c-0.2-0.2,0-0.6,0.3-0.4c1.5,1.2,1.9,1.6,3.3,1.9	c1.6,0.1,3.2-0.6,4-2.1h-0.8c-0.6,0.2-1.2,0.3-2,0.3c-0.4,0-0.8-0.1-1.1-0.2c-0.1,0-0.2-0.1-0.4-0.1H1.1L1.1,6z M23.6,6H1.1	c0.4-0.6,0.9-1.2,1.5-1.8C5.3,1.9,6.9,1.5,9,0.8c2.3-0.6,6.4-1.1,9.2-0.5c3,0.6,3.5,0.7,5.9,2.2c1.6-0.5,3.5,1.2,3.9,2.7	c-0.8,0.3-1.7,0.7-3,0.7c-0.9,0-2-0.7-2.9-0.9c-0.2,0-0.3,0.4,0,0.5C22.7,5.6,23.2,5.9,23.6,6L23.6,6z M27.9,6h-0.8	c0.3-0.1,0.6-0.2,0.9-0.3C28,5.8,27.9,5.9,27.9,6L27.9,6z M25,2.8c-0.7,0-1.2,0.5-1.2,1.2c0,0.7,0.5,1.4,1.2,1.4	c0.7,0,1.5-0.5,1.5-1.2C26.4,3.4,25.7,2.8,25,2.8L25,2.8z M25.1,3.1c0.6,0,1,0.4,1,1c0,0.5-0.4,0.9-1,0.9c-0.6,0-1-0.4-1-0.9	C24.1,3.6,24.5,3.1,25.1,3.1L25.1,3.1z M25.2,3.5c-0.3,0-0.7,0.3-0.7,0.6c0,0.4,0.4,0.6,0.7,0.6c0.4,0,0.6-0.3,0.6-0.6	C25.7,3.7,25.5,3.5,25.2,3.5L25.2,3.5z M25.1,3.8c0.2,0,0.3,0.1,0.3,0.3c0,0.2-0.1,0.3-0.3,0.3c-0.2,0-0.3-0.1-0.3-0.3	C24.8,4,24.9,3.8,25.1,3.8L25.1,3.8z M5.3,11.7c0,0.5-0.3,0.7-0.3,0.7h22.2v-0.7C19.2,11.7,11.9,11.7,5.3,11.7L5.3,11.7z",
	debian: "M15.5,10.7c0-0.1-0.1-0.1-0.1-0.1s0.1-0.1,0.1-0.2c0-0.1,0.1-0.2,0.1-0.2	c0,0,0.1,0,0.1,0.4c0,0.3-0.1,0.4-0.1,0.4S15.5,10.9,15.5,10.7z M12.2,13.7c0,0.1,0.3,0.1,0.5,0.2c0.2,0.1,0.2,0,0.3,0	c0.1,0,0.1,0.1,0.2,0c0.1-0.1,0.4-0.3,0.4-0.3c-0.1,0-0.2,0.1-0.4,0.1c-0.4,0-0.5,0-0.7,0C12.3,13.6,12.2,13.7,12.2,13.7z	 M11.2,25.6c-0.2,0-0.4,0-0.7-0.1c-0.9-0.3-1.1-0.4-1.3-0.5c-0.2-0.1-0.3-0.3-0.4-0.4c-0.1-0.1-0.1-0.2-0.2-0.2	c-0.1,0-0.3-0.3-0.4-0.3c0,0,0.1,0.3,0.2,0.3c0.1,0.1-0.4-0.1-0.5-0.2c-0.1,0-0.3-0.1-0.3-0.2c0-0.1,0-0.1,0-0.1	c0-0.1-0.6-0.2-0.6-0.3c0,0,0.1-0.2,0.2-0.3c0-0.1-0.1,0-0.1,0c-0.1,0-0.1-0.1-0.2-0.1c0,0-0.1-0.1-0.1-0.1s-0.1-0.1-0.1-0.1	c0,0-0.1-0.1-0.1-0.1c0,0-0.1-0.1-0.1-0.1c-0.1-0.1-0.2-0.3-0.2-0.3c0-0.1,0-0.1-0.1-0.1c-0.1,0-0.1,0-0.2,0c-0.1,0-0.1-0.1-0.1-0.1	c0-0.1-0.1-0.1-0.1-0.2c0,0-0.1-0.1-0.1-0.1c0,0-0.1-0.1-0.1-0.1c0,0-0.2-0.4-0.2-0.4c0-0.1,0-0.3,0-0.3l-0.1,0.2	c0,0-0.2-0.4-0.4-0.6c-0.2-0.2-0.8-1-0.8-1.1s0-0.1,0.1-0.1c0,0,0.3,0.1,0.3,0.1S4.1,19.8,4,19.7c-0.1-0.1-0.3-0.4-0.3-0.4	c0,0,0.1,0,0.1-0.1c0,0,0,0,0.1-0.1c0,0,0-0.1-0.1-0.2c-0.1-0.1-0.2-0.3-0.3-0.5c-0.1-0.2-0.2-0.2-0.2-0.3c0-0.1-0.1-0.1-0.1-0.2	c0-0.2,0-0.1,0.1,0c0.1,0.1,0.3,0.2,0.4,0.2c0.1,0,0-0.1-0.2-0.6c-0.1-0.2-0.3-0.6-0.3-0.7c-0.1-0.1-0.1-0.3-0.2-0.3	c-0.1,0-0.2,0.7-0.3,0.7c-0.1,0-0.6-1.5-0.6-1.5h0.2c0,0-0.1-0.1-0.1-0.3c0-0.1-0.1-0.2-0.1-0.2s0-0.2,0-0.4c0-0.2,0-0.2,0-0.3	c0-0.1,0-0.1-0.2-0.4c-0.2-0.3-0.2-0.6-0.2-0.8c0-0.2,0-0.4,0-0.7c0-0.3,0.1-0.9,0.2-1.2c0-0.3,0.1-1,0.2-1.4c0-0.5,0.1-0.7,0.3-1	c0.1-0.2,0.2-0.3,0.4-0.6s0.3-0.8,0.3-0.8l-0.3,0c0,0,0,0,0.1-0.1c0.1-0.1,0.1-0.1,0.4-0.6c0.3-0.4,0.8-1,1.5-1.6	C5,4.8,5.6,4.7,5.7,4.7c0.1,0,0.2,0,0.3,0c0,0,0,0,0.3-0.3c0.1-0.2,0-0.1,0,0C6.1,4.5,6,4.7,5.9,4.7c-0.1,0-0.1-0.1-0.1-0.1	s0.1-0.1,0.5-0.5c0.4-0.3,0.5-0.4,0.6-0.4s0.2,0,0.5,0c0.5,0,0.9-0.3,0.9-0.4c0-0.1,0,0-0.4,0.2C7.5,3.7,7.4,3.7,7.4,3.7	s0.1-0.1,0.1-0.2c0,0,0.3-0.1,0.7-0.2c0.4-0.1,0.4-0.2,0.4-0.4c0-0.1,0.3-0.2,0.7-0.3c0.3,0,0.7-0.1,0.8-0.1c0,0,0.1,0,0.1,0	c0,0-0.1,0.1-0.3,0.1C9.6,2.8,9.6,2.9,9.6,2.9s0.1-0.1,0.3-0.1c0.1,0,0.2-0.1,0.3-0.1c0.1,0,0-0.1,0.1-0.1c0,0,0.1,0,0.2-0.1	c0.1-0.1,0.5-0.1,1-0.1c0.4,0,1.1,0.1,1.4,0.1C13.2,2.6,13.8,2.8,14,3c0.3,0.1,0.7,0.3,1.3,0.7c0.6,0.3,0.7,0.5,1.1,0.8	c0.4,0.3,0.6,0.6,0.9,1c0.3,0.5,0.4,0.7,0.5,0.9c0.2,0.4,0.3,1.1,0.3,1.3c0,0.2,0.1,1,0.1,1c0,0.1,0,0.1,0.1,0.1c0,0,0,0.1,0,0.2	c0,0.1,0,0.2,0,0.5c0,0.3,0.1,0.8,0.1,1.1c0,0.5-0.3,1.3-0.3,1.3l0.2-0.6c0,0,0,0.5,0,0.6c0,0.1,0,0.2-0.1,0.4	c-0.1,0.2-0.2,0.5-0.2,0.6c0,0.1-0.2,0.1-0.2,0.2c0,0-0.1,0.1-0.1,0.1c0,0-0.2,0.3-0.2,0.4c0,0.1,0.1,0.1,0.1,0.1c0,0,0,0.1,0,0.2	c0,0.1-0.1,0.2-0.1,0.2c-0.1,0.1-0.2,0.2-0.6,0.5c-0.3,0.3-0.9,0.8-1.1,0.8c-0.2,0,0-0.1,0.1-0.2c0.1-0.1,0.2-0.2,0.1-0.2	c0,0-0.4,0.3-0.5,0.4c-0.1,0.1,0,0.1-0.1,0.2c-0.1,0.1-0.2,0.1-0.4,0.2c-0.2,0.1-0.4,0.1-0.5,0.1c0,0-0.1-0.1-0.1-0.1	s-1.4,0.6-2.1,0.6c-0.6,0-1.4-0.4-2.1-0.9c-0.7-0.5-1.1-1.2-1.2-1.9c-0.1-0.6-0.2-1.7-0.2-1.9c0-0.2,0,0,0,0c0,0-0.1,0-0.1,0	c0,0,0,0.1,0,0c0-0.1,0-0.2,0-0.3c0-0.1,0-0.2,0-0.3s0-0.3,0-0.5c0-0.1,0-0.3,0.2-0.7C8.9,9.5,9.2,9,9.5,8.8	c0.2-0.2,0.5-0.4,0.9-0.6c0.4-0.2,0.8-0.4,1.1-0.5c0.3-0.1,0.7-0.2,1-0.2c0.4,0,0.8,0.1,1.1,0.3c0.3,0.1,0.6,0.4,0.7,0.5	c0.2,0.1,0.4,0.3,0.4,0.3s-0.1-0.2-0.2-0.3c-0.1-0.1-0.3-0.3-0.4-0.4c-0.1-0.1-0.3-0.3-0.6-0.5c-0.3-0.2-0.7-0.3-0.9-0.3	c-0.2,0-0.7,0-0.9,0c-0.2,0-0.9,0.1-1.1,0.1c-0.2,0.1-0.5,0.2-0.6,0.3C9.9,7.6,9.8,7.7,9.8,7.7C9.7,7.8,9.5,8,9.4,8.1	C9.3,8.2,9.1,8.7,9,8.8C9,8.9,8.7,9,8.6,9.2C8.4,9.4,8.3,9.8,8.3,10c0,0.2-0.1,0.4-0.2,0.4C8,10.6,8,10.6,8,10.7	c0,0.3-0.1,1.1-0.1,2.1c0,0.4,0.2,0.8,0.3,0.9c0.1,0.2,0.3,0.5,0.3,0.6c0.1,0.1,0.1,0.2,0.1,0.2l-0.1-0.3c0,0,0.4,0.4,0.6,0.5	c0.1,0.1,0.5,0.4,0.6,0.5c0.1,0.1,0.6,0.5,0.8,0.6c0.2,0.1,0.3,0.2,0.3,0.2c0,0,0,0,0,0c0,0,0.1,0.1,0.7,0.3c1.2,0.4,1.8,0.4,2,0.4	c0.2,0,0.5,0,1.2-0.2c0.6-0.1,1.3-0.6,1.5-0.8c0.3-0.2,0.8-0.6,0.9-0.7c0.1-0.1,0.3-0.2,0.4-0.3c0.1-0.1,0.1-0.1,0.2-0.2	c0.1-0.1,0.2-0.2,0.3-0.3c0.1-0.1,0.3-0.2,0.3-0.2s-0.1,0.2-0.2,0.2c0,0.1,0,0,0.1,0c0.1,0-0.1,0.2-0.1,0.2c0,0.1,0.3-0.5,0.3-0.5	c0-0.1-0.1,0-0.2,0c-0.1,0-0.1,0-0.1,0c0,0,0.1-0.2,0.2-0.3c0.1-0.2,0.3-0.4,0.3-0.4l0.3,0.4c0,0,0-0.2,0-0.5c0-0.2,0.2-0.4,0.3-0.5	c0-0.1,0.1-0.2,0.3-0.4c0.1-0.2,0.2-0.5,0.2-0.7c0-0.2,0-0.5,0-0.5s0-0.1,0.1-0.1c0.1-0.1,0,0,0,0.1c0,0.1,0.1,0.2,0.1,0.2	c0,0,0-0.1,0-0.2c0-0.1,0,0,0-0.1c0-0.1-0.1,0-0.1-0.1c0,0,0,0,0-0.2c0-0.1,0-0.1,0,0c0,0,0.1,0.1,0.1,0.2c0,0.1,0.1,0.3,0.1,0.3	s-0.1-0.2-0.1-0.5c0-0.3,0.1-0.4,0.2-0.5c0.1-0.1,0.1-0.2,0.2-0.4c0-0.2,0.1-0.2,0-0.2c-0.1,0-0.1,0.2-0.2,0.2s-0.1-0.5-0.1-0.8	c0-0.2,0.1-0.2,0.1-0.2c0,0,0,0,0.1,0c0,0,0,0-0.1-0.1c-0.1-0.1-0.2-0.3-0.3-0.6c-0.1-0.3,0-0.3,0-0.3c0,0,0.1,0.1,0.1,0.2	C19.9,8.3,20,8.4,20,8.4c0,0-0.1-0.6-0.2-0.7c0-0.1,0-0.4,0-0.4c0-0.1-0.1-0.3-0.2-0.4c-0.1-0.2-0.1,0,0,0.2c0,0.2-0.2-0.1-0.3-0.4	c-0.1-0.4-0.2-0.5-0.1-0.5c0.1,0,0.3,0.3,0.4,0.3c0.1,0,0.1-0.3,0.1-0.3s0.4,0.5,0.5,0.9c0.1,0.3,0.2,0.6,0.3,1	c0.1,0.3,0.2,0.8,0.2,0.8s-0.2-0.8-0.2-1C20.6,7.6,20.4,7,20.3,7c-0.1-0.1,0-0.1,0-0.1c0,0,0.1,0,0-0.1c0-0.1-0.2-0.8-0.2-0.8	c0,0,0.3,0.5,0.3,0.5S20.2,5.6,20,5c-0.2-0.6-0.8-1.2-1-1.5c-0.3-0.3-0.7-0.6-0.9-0.8c-0.3-0.2-0.7-0.5-0.9-0.6	C17,2,16.6,1.7,16.6,1.7s0.2,0.3,0.3,0.4c0.1,0.1,0,0.1,0,0.1s-0.6-0.4-0.7-0.4c-0.1,0-0.1-0.1-0.1-0.2c0-0.1-0.5-0.3-0.6-0.3	c-0.1,0-0.2,0.1-0.2,0.2c-0.1,0-0.3,0-0.3,0S14.5,1.2,14.2,1c-0.3-0.1-0.4-0.2-0.7-0.2c-0.3,0-1.1-0.4-1.1-0.4l0.1,0.3	c0,0-0.5-0.2-0.7-0.2c-0.2,0-0.3,0.2-0.5,0.2c-0.1,0-0.5,0-0.6,0c-0.1,0-0.1-0.1,0-0.1c0.1,0,0.1-0.1,0.2-0.1c0.1,0,0.3-0.1,0.3-0.1	s-0.3,0.1-0.5,0.1s-0.3-0.1-0.4-0.1c-0.1,0-0.6,0.1-0.6,0.1s0.1-0.1,0.2-0.1c0.1-0.1,0.3-0.2,0.3-0.2s-0.1,0-0.2,0	c-0.3,0-0.9,0.2-1.1,0.3c-0.2,0,0-0.2,0-0.2S8.6,0.4,8.4,0.5C8.1,0.6,7.7,0.8,7.3,0.9c-0.4,0.1-0.7,0.3-1,0.4C6,1.5,5.7,1.7,5.5,1.9	C5.3,2,5.1,2.2,5,2.3c-0.1,0.1-0.1,0-0.1,0c0-0.1,0-0.1,0-0.1s0,0.1-0.2,0.2C4.5,2.6,4.2,2.9,4,3C3.9,3.1,3.6,3.3,3.5,3.4	C3.3,3.5,3,3.8,3,3.9C2.9,4,2.8,4.1,2.7,4.3C2.6,4.6,2.6,4.7,2.6,4.7c-0.1,0-0.1,0-0.1,0.1c0,0.1-0.1,0.2-0.2,0.3	c0,0.1-0.1,0.2-0.2,0.4C2.1,5.7,2,5.9,1.9,6.1C1.8,6.2,1.6,6.4,1.6,6.4c-0.1,0-0.1-0.2-0.1-0.2s0,0.1-0.1,0.3C1.3,6.7,1,7.3,0.8,7.7	c-0.1,0.4-0.6,2-0.6,2c0,0,0.1,0.2,0.1,0.3c0,0.2-0.1,1.5-0.1,1.7c0,0.2,0,0.6,0,0.8c0,0.2,0,0.5,0,1.4c0,0.9,0,2.1,0.1,2.4	c0,1.1,0.4,2.1,0.7,2.8c0.3,0.7,0.7,1.4,1.5,2.4c0.8,1,1.2,1.4,1.9,1.9c0.6,0.5,1.4,0.9,1.9,1.1c0.5,0.2,1.4,0.5,1.7,0.6	c0.3,0.1,0.8,0.3,1,0.3c0.2,0.1,0.4,0.1,0.7,0.2c0.3,0.1,0.4,0.1,0.5,0.1c0.1,0,0.2,0,0.6,0c0.4,0,1,0,1,0S11.4,25.7,11.2,25.6z	 M14.4,13c0,0,0.2-0.1,0.3-0.1c0.1,0,0.1,0.1,0.1,0.1c0,0.1,0,0,0.1,0c0-0.1,0,0,0.2-0.2c0.2-0.2,0.3-0.8,0.3-0.8s-0.1,0.4-0.3,0.6	c-0.1,0.2-0.2,0.2-0.3,0.3C14.5,12.9,14.4,13,14.4,13c0-0.1,0.2-0.3,0.3-0.5c0.1-0.1,0.2-0.4,0.2-0.4s-0.1,0.2-0.3,0.3	c-0.2,0.2-0.3,0.4-0.3,0.4C14.3,12.9,14.3,12.9,14.4,13C14.3,13,14.4,12.9,14.4,13z M19.8,11.6C19.7,11.6,19.7,11.6,19.8,11.6	c0,0.1-0.2,0.7-0.2,0.8c0,0,0,0.1,0.1-0.1C19.7,12.2,19.8,11.8,19.8,11.6C19.8,11.6,19.8,11.6,19.8,11.6z M20.2,11.7	c0,0-0.1,0.2-0.1,0.4c0,0.3-0.1,0.4-0.1,0.6c-0.1,0.2-0.1,0.5-0.2,0.7c-0.1,0.2-0.4,0.9-0.4,0.9s0.2-0.3,0.4-0.6	c0.2-0.3,0.2-0.6,0.3-0.7c0-0.2,0.1-0.5,0.1-0.6c0-0.1,0.1-0.4,0.1-0.5C20.2,11.7,20.3,11.7,20.2,11.7z M0,8.4c0,0,0.1-0.3,0.2-0.6	c0-0.3,0.1-0.4,0.1-0.4S0,7.8,0,7.9C0,8.1,0.1,8,0.1,8.1C0.1,8.3,0,8.4,0,8.4z M0.5,6.3c0,0,0.1,0,0.1-0.1c0.1-0.1,0.1-0.1,0.1-0.1	c0,0,0,0,0,0C0.6,6.1,0.5,6.2,0.5,6.3C0.5,6.2,0.5,6.2,0.5,6.3z M0.7,6.1c0,0,0.1,0,0.1-0.1C0.9,6,0.9,5.9,1,5.8	c0-0.1,0.1-0.3,0.1-0.3c0-0.1-0.1,0-0.1,0c0,0-0.1,0-0.1,0.1c0,0-0.1,0.1-0.1,0c0,0,0-0.1,0,0.1c0,0.1,0,0.1,0,0.2	C0.8,6,0.7,6.1,0.7,6.1z M7.8,14.2l-0.1,0.3c0,0,0.1,0.2,0.3,0.4c0.1,0.2,0.2,0.4,0.3,0.4c0,0,0.2,0.2,0.2,0.2c0,0,0.1,0.1,0.1,0.1	s-0.1-0.3-0.2-0.4c-0.1-0.1-0.1-0.2-0.3-0.4C7.9,14.5,7.8,14.2,7.8,14.2z M8.3,14.7c0,0,0.2,0.3,0.3,0.4c0.1,0.1,0.3,0.5,0.5,0.7	c0.2,0.2,0.4,0.4,0.6,0.6c0.2,0.1,0.8,0.5,0.9,0.6c0.2,0.1,0.4,0.2,0.7,0.3c0.3,0.1,0.4,0.2,0.6,0.2c0.1,0,0.5,0.1,0.5,0.1	c0.7,0,1.5-0.4,1.5-0.4s-0.6,0-0.8,0c-0.3,0-0.9,0-1.4-0.2c-0.5-0.2-0.6-0.2-0.6-0.3c-0.1-0.1-0.4-0.3-0.4-0.3c0-0.1,0-0.1,0-0.1	s-0.1,0-0.1,0.1c0,0.1,0,0.1,0,0.1s-0.1,0-0.4-0.2c-0.8-0.4-1.2-1-1.2-1s0,0.2,0.3,0.5c0.3,0.3,0.5,0.5,0.5,0.5S9.6,16,9.5,15.9	c-0.1-0.1-0.3-0.4-0.5-0.5c-0.1-0.2-0.2-0.3-0.3-0.3c0-0.1-0.1-0.1-0.1-0.1C8.5,14.7,8.3,14.7,8.3,14.7z M11.3,0.4	c0,0.1-0.1,0-0.1,0C11.2,0.5,11.3,0.5,11.3,0.4c0,0,0.1,0,0.2,0C11.7,0.3,11.4,0.3,11.3,0.4c-0.3-0.1-0.4-0.1-0.4-0.1	S11.3,0.4,11.3,0.4z M10.8,0.1c0,0,0.1,0,0.1,0c0,0,0,0,0.1,0c0.1,0,0.4-0.1,0.3-0.1c-0.1,0-0.2,0-0.3,0C10.9,0.1,10.8,0.1,10.8,0.1	z M11.4,0c0,0,0.3,0,0.3,0c0,0,0.2,0,0.1,0c-0.1,0-0.1,0-0.2,0C11.5,0,11.4,0,11.4,0z",
	android: "M4.3,8.6h13.9V20c0,0.7-0.5,1.2-1.2,1.2h-1.4v3.4c0,0.9-0.7,1.6-1.6,1.6c-0.9,0-1.6-0.7-1.6-1.6v-3.4H10v3.4	c0,0.9-0.7,1.6-1.6,1.6c-0.9,0-1.6-0.7-1.6-1.6v-3.4H5.5c-0.7,0-1.2-0.5-1.2-1.2L4.3,8.6L4.3,8.6z M1.6,8.5C0.7,8.5,0,9.3,0,10.1	v6.3C0,17.3,0.7,18,1.6,18c0.9,0,1.6-0.7,1.6-1.6v-6.3C3.2,9.3,2.4,8.5,1.6,8.5z M18.2,7.5H4.3c0.2-2,1.5-3.7,3.3-4.7L6.3,0.9	C6.1,0.6,6.2,0.3,6.4,0.1C6.7-0.1,7,0,7.2,0.3l1.4,2.1c0.8-0.3,1.7-0.4,2.6-0.4c0.9,0,1.8,0.2,2.6,0.4l1.4-2.1	C15.4,0,15.8-0.1,16,0.1c0.3,0.2,0.3,0.5,0.2,0.8l-1.3,1.9C16.7,3.8,18,5.5,18.2,7.5z M9.1,4.8C9.1,4.4,8.7,4,8.3,4	C7.9,4,7.5,4.4,7.5,4.8c0,0.4,0.3,0.8,0.8,0.8C8.7,5.6,9.1,5.2,9.1,4.8z M15,4.8C15,4.4,14.7,4,14.3,4c-0.4,0-0.8,0.3-0.8,0.8	c0,0.4,0.3,0.8,0.8,0.8C14.7,5.6,15,5.2,15,4.8z M20.9,8.5c-0.9,0-1.6,0.7-1.6,1.6v6.3c0,0.9,0.7,1.6,1.6,1.6	c0.9,0,1.6-0.7,1.6-1.6v-6.3C22.5,9.3,21.8,8.5,20.9,8.5z",
	wordpress: "M15,15.8l4,11c-1.3,0.5-2.8,0.8-4.3,0.8c-1.2,0-2.5-0.2-3.7-0.6L15,15.8z M2.1,14.8c0,5,2.9,9.5,7.2,11.5	L3.2,9.6C2.5,11.1,2.1,12.9,2.1,14.8z M8.7,7.9v0.8c0,0.1-0.1,0.1-0.1,0.1H7.2C7,8.7,7,8.8,7,9l4.6,13.6l2.8-8.5L12.4,9	c-0.1-0.2-0.2-0.3-0.5-0.3h-1.3c-0.1,0-0.1-0.1-0.1-0.1V7.9c0-0.1,0.1-0.1,0.1-0.1c2.4,0.1,4.8,0.1,7.2,0C18,7.8,18,7.9,18,7.9v0.8	c0,0.1-0.1,0.1-0.1,0.1h-1.2c-0.3,0-0.4,0.1-0.3,0.3l4.6,13.4l1.6-5c2-6.2-1.7-6.7-1.6-9.9c0-1.5,1.1-2.2,2.3-2.2	C20.9,3.2,18,2,14.6,2l0,0C10.2,2,6.3,4.3,4,7.8c1.4,0,2.9,0,4.6-0.1C8.7,7.8,8.7,7.8,8.7,7.9z M29.4,14.8c0,8.2-6.6,14.8-14.7,14.8	S0,23,0,14.8S6.6,0,14.7,0S29.4,6.6,29.4,14.8z M28.6,14.8c0-7.7-6.2-13.9-13.9-13.9C7.1,0.9,0.9,7.2,0.9,14.8	c0,7.7,6.2,13.9,13.9,13.9S28.6,22.4,28.6,14.8z M25.8,8.7c0.1,1.9-0.5,4.3-1.1,6l-4,11.2c3.9-2.2,6.6-6.4,6.6-11.1	C27.4,12.6,26.9,10.5,25.8,8.7z",
	magento: "M0,7.5L12.2,0l12.2,7.4V21l-3.2,2V9.3l-9.1-5.6L3.2,9.3V23c0,0-2.8-1.8-3.2-2 M6.5,25l5.7,3.5l5.7-3.4V11	L14,8.6v16l-1.8,1.1l-1.8-1.3V8.6l-3.9,2.5",
	drupal: "M16.7,4.7c-1.3-0.8-2.5-1.1-3.7-1.9c-0.8-0.5-1.8-1.7-2.7-2.8C10,1.7,9.5,2.4,8.9,2.9c-1.2,1-2,1.3-3.1,1.9	C4.9,5.2,0,8.1,0,14.4c0,6.3,5.3,11,11.2,11s11-4.3,11-10.8S17.4,5.2,16.7,4.7z M16.8,23.1c-0.1,0.1-1.2,0.9-2.6,1	c-1.3,0.1-3.1,0.2-4.2-0.8c-0.2-0.2-0.1-0.4,0-0.5c0.1-0.1,0.2-0.2,0.4-0.2c0.1,0,0.1,0,0.2,0c0.5,0.4,1.2,0.7,2.8,0.7	c1.6,0,2.7-0.4,3.2-0.8c0.2-0.2,0.3,0,0.3,0.1C16.9,22.8,17,22.9,16.8,23.1z M12.5,20.9c0.3-0.2,0.7-0.6,1.1-0.8	c0.4-0.2,0.6-0.1,1-0.1s0.8,0,1.1,0.2c0.3,0.2,0.5,0.6,0.6,0.9c0.1,0.2,0,0.4-0.2,0.5c-0.2,0.1-0.2,0-0.4-0.3	c-0.2-0.3-0.3-0.6-1.2-0.6c-0.9,0-1.1,0.3-1.5,0.6c-0.4,0.3-0.6,0.5-0.7,0.3C12.2,21.3,12.2,21.1,12.5,20.9z M19,21.1	c-0.9-0.1-2.6-2.8-3.8-2.9c-1.4,0-4.5,3-6.9,3c-1.5,0-1.9-0.2-2.4-0.5c-0.7-0.5-1.1-1.3-1.1-2.4c0-1.9,1.8-3.7,4.1-3.7	c2.9,0,4.8,2.8,6.3,2.8c1.2,0,3.6-2.4,4.7-2.4c1.2,0,1.6,1.3,1.6,2c0,0.8-0.2,2.1-0.8,3S19.7,21.1,19,21.1z",
	arrow: "m 1.6934332,-3.6491443 -0.73807602,0.7813 L 13.030272,11.289556 0.95535718,25.446956 1.6934332,26.228256 15.834959,11.289556 1.6934332,-3.6491443 z",
	endpoint: "M25.06,13.719c-0.944-5.172-5.461-9.094-10.903-9.094v4c3.917,0.006,7.085,3.176,7.094,7.094c-0.009,3.917-3.177,7.085-7.094,7.093v4.002c5.442-0.004,9.959-3.926,10.903-9.096h4.69v-3.999H25.06zM20.375,15.719c0-3.435-2.784-6.219-6.219-6.219c-2.733,0-5.05,1.766-5.884,4.218H1.438v4.001h6.834c0.833,2.452,3.15,4.219,5.884,4.219C17.591,21.938,20.375,19.153,20.375,15.719z",
	locked: "M24.875,15.334v-4.876c0-4.894-3.981-8.875-8.875-8.875s-8.875,3.981-8.875,8.875v4.876H5.042v15.083h21.916V15.334H24.875zM10.625,10.458c0-2.964,2.411-5.375,5.375-5.375s5.375,2.411,5.375,5.375v4.876h-10.75V10.458zM18.272,26.956h-4.545l1.222-3.667c-0.782-0.389-1.324-1.188-1.324-2.119c0-1.312,1.063-2.375,2.375-2.375s2.375,1.062,2.375,2.375c0,0.932-0.542,1.73-1.324,2.119L18.272,26.956z",
	undefined: "m 20.196259,22.538884 c -0.07456,-0.304099 -0.197647,-0.59384 -0.167346,-0.916792 0.141638,-1.505969 1.779165,-2.413423 2.959238,-3.029024 1.299806,-0.677931 2.614871,-1.325757 3.915495,-2.001969 1.617607,-0.841103 3.582844,-1.757035 4.008783,-3.756409 0.07728,-0.362587 0.08123,-0.754572 0.05787,-1.125047 C 30.790732,8.8527404 28.202084,6.8921586 25.933275,5.649538 23.905257,4.5388188 21.665923,3.7657462 19.430177,3.2255803 17.289855,2.7084566 15.128025,2.2950078 12.927055,2.1970876 11.358842,2.1273202 9.7899848,2.2753594 8.2454908,2.5374239 6.5225273,2.829778 4.7616602,3.1512803 3.1213054,3.7804856 2.4760547,4.0280089 1.6519254,4.3545713 1.2761783,4.9813859 1.1526576,5.1874361 1.0257578,5.5979415 1.1807481,5.8237977 c 0.06608,0.096304 0.2092371,0.1662199 0.3062675,0.2265365 0.2042727,0.126999 0.4074925,0.2554199 0.6128586,0.380625 1.2166798,0.7417625 2.5420221,1.3686888 3.8814413,1.8456308 0.5211329,0.1855721 1.0431747,0.3662368 1.5661958,0.5462622 0.152027,0.052318 0.3062973,0.096446 0.4596456,0.1442439 0.053482,0.016647 0.1289649,0.058459 0.1857311,0.045986 C 8.2638271,8.997491 8.3295166,8.8915487 8.3744632,8.8388688 8.4936647,8.6991764 8.6271303,8.5715317 8.7584184,8.4436319 9.1196673,8.0917327 9.5661865,7.7833101 10.015973,7.5606872 10.3825,7.3792806 10.76291,7.2156451 11.156575,7.1046598 13.28939,6.5033961 16.291656,6.581928 17.488963,8.8215717 c 0.09174,0.1716014 0.151733,0.3659945 0.200623,0.5535414 0.07158,0.2745643 0.1303,0.5785971 0.10341,0.8648959 -0.07924,0.842535 -0.722121,1.610415 -1.273285,2.196799 -1.168996,1.243691 -2.571503,2.207227 -3.798473,3.385522 -0.608398,0.584291 -1.292142,1.233798 -1.597996,2.046116 -0.153285,0.407067 -0.02142,0.829383 0.08876,1.228159 0.227824,0.824596 0.577553,1.61892 0.910164,2.404427 0.09965,0.235251 0.195501,0.472578 0.291788,0.709219 0.04562,0.112084 0.08489,0.267251 0.164091,0.359451 0.166038,0.193047 0.637565,0.26881 0.87676,0.294931 1.000869,0.108809 2.042651,0.003 3.047279,0.003 0.796203,0 1.589687,-0.04705 2.383342,-0.102227 0.40857,-0.02837 0.946867,-0.0115 1.310837,-0.226433 m -2.008815,4.003136 c -1.091892,0.146135 -2.161287,0.309983 -3.132397,0.879779 -0.760321,0.446292 -1.050236,1.312711 -0.664815,2.122814 0.116621,0.245082 0.311164,0.492098 0.511603,0.671509 0.603241,0.539491 1.364176,0.853832 2.110963,1.123818 1.285468,0.464974 2.636824,0.712887 4.000607,0.712887 0.429174,0 0.869408,0.01229 1.293816,-0.05744 0.219098,-0.03619 0.447558,-0.05937 0.66391,-0.111265 0.731208,-0.175402 1.466775,-0.338003 2.110961,-0.751771 0.414359,-0.26639 0.759943,-0.657465 0.814284,-1.1726 0.01923,-0.182318 -0.0053,-0.358623 -0.04052,-0.536238 C 25.81228,29.203918 25.723894,28.983331 25.59403,28.801011 25.421071,28.55801 25.214194,28.351262 24.979946,28.169492 24.467189,27.771776 23.860663,27.52082 23.260539,27.296983 22.23674,26.915386 21.160491,26.688578 20.07709,26.58375 19.472574,26.52528 18.792981,26.461144 18.187444,26.54208 z",
	null: null
}

// Debugging Vars

var clusterdata = undefined;
var node_clicked = false;
var scale_save = null;
var translate_save = null;
var plot_heatmap = true;

var offsetx = 18;
var offsety = 18;

var get_cpu_util = true
var net_flow_live = false

//var ELEMENTS = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";

/*
 *	And then do all this on doc.ready
 *
 */
$(document).ready(function() {

	// @TODO: We seem to have 2 versions of jQuery. What is the difference between them and which can be deleted?
	loadPaneLayout();
	// TODO: display a loading image in the center pane until cluster data is loaded
	loadNewForceGraph();
	setButtonStates();
	loadTopGraph();
	loadListPane();

	//getServerData(setServers, "get servers");
	// TODO: We need to ask OpenStack what components we have installed, and build our environment based on this. E.g. - No Neutron? Don't bother with networking. No Ceilometer? No heatmaps for you.
	getServerData(loadInitialServers, "get startup data");


	document.body.onmousedown = function() { 
		//console.log("clicked")
		mouseDown = 1;
	}
	
	document.body.onmouseup = function() {
		//console.log("unclicked")
		mouseDown = 0;
	}

	if (d3.event) {
		// prevent browser's default behavior
		d3.event.preventDefault();
	}

	$(window).resize(function () {
		waitForFinalEvent(function(){
			var w = $('#pane-center').width();
			var h = $('#pane-center').height();
			//console.log("resizing pane to " + h + " " + w);
			svg.attr("width", w).attr("height", h);
			$("#pane-center canvas").attr("width", w).attr("height", h);

		}, 500, "some unique string");
	});

});

/**
 * Master function to pull data from the server
 * @param  {Function} callback [What to do to the data when it is returned]
 * @param  {[String]}   param    [The query to send to the server]
 */
function getServerData(callback, param) {
	 $.ajax({
		type: "POST",
		data: {params: param, OS_endpoint: OS_endpoint, OS_username: OS_username, OS_password: OS_password, OS_tenant: OS_tenant},
		success: function(data) {
			callback(data);
		},
	})
}

/**
 *	Pulls server data, but does it directly using the OpenStack APIs, so doesn't need to be on the same host. The APIs are much slower this way, so not used for now.
 */
function getOpenStackData() {
	var token;
	$.ajax({
		url: "http://10.0.130.118:8082",
		type: "POST",
		dataType: 'json',
		data: JSON.stringify({"method":"POST","url":"http://10.0.130.118:5000/v2.0/tokens","data":{
			"auth": {"tenantName": tenant, "passwordCredentials": {"username": "admin", "password": "ADMIN_PASS"}}
		},"keystone":"true"}),
		success: function( data ) {
			// console.log(data);
			token = data.access.token.id;
				//console.log(token);
			console.log("We got a token");
			$.ajax({
				url: "http://10.0.130.118:8082",
				type: "POST",
				dataType: 'json',
				data: JSON.stringify({"method":callMethod,"url":Durl,"data":userData,"token": token,"keystone":keystone}),
				success: callback
			});
		}
	});
}

// @TODO: We want a better lookup table for added entities in clusterdata, where we can pass an instance ID and recieve it's type for future lookup
// @TODO: We need to sanity check image name whenever called/printed - bear in mind an active instance can have an image that was deleted.

/**
 *	Loads an internal array of instances (servers) and other OpenStack data
 *
 *	@param data		Array of servers to load
 */
function loadInitialServers(data) {
	clusterdata = JSON.parse(data);
	// TODO: It's far to easy to grab the pane, move outside the window, then be dragging until you click again. This is annoying and buggy. What can we do about it?
	
	clusterdata["lookup"] = {}

	// Since Neutron is annoying and formats it's API data differently, we must first clean it up.
	clusterdata["routers"] = cleanJsonByID(clusterdata["routers"]);
	clusterdata["subnets"] = cleanJsonByID(clusterdata["subnets"]);
	clusterdata["ports"] = cleanJsonByID(clusterdata["ports"]);
	clusterdata["neutronnetwork"] = cleanJsonByID(clusterdata["neutronnetwork"]);

	/*----------  Networks  ----------*/

	var network_keys = Object.keys(clusterdata["neutronnetwork"])

	for (var i in network_keys) {
		var netkey = network_keys[i];
		addNetworkToDash(netkey);
	}

	/*----------  Routers  ----------*/

	var router_keys = Object.keys(clusterdata["routers"]);
	
	for (var i in router_keys) {
		var roukey = router_keys[i];
		addRouterToDash(roukey);
	}

	/*----------  VMs (Servers)  ----------*/

	var server_keys = Object.keys(clusterdata["servers"])

	for (var i in server_keys) {
		var key = server_keys[i];
		addServerToDash(key);
	}

	/*----------  Volumes  ----------*/

	var volume_keys = Object.keys(clusterdata["volumes"])

	for (var i in volume_keys) {
		var volkey = volume_keys[i];
		addVolumeToDash(volkey);
	}

	/*----------  Flavors  ----------*/

	var flavor_keys = Object.keys(clusterdata["flavors"])

	for (var i in flavor_keys) {
		clusterdata["lookup"][flavor_keys[i]] = "flavors"
	}

	/*----------  Floating_IPs  ----------*/

	var ip_keys = Object.keys(clusterdata["floating_ips"]) 

	for (var i in ip_keys) {
		clusterdata["lookup"][ip_keys[i]] = "floating_ips";
	}

	/*----------  Images  ----------*/

	var image_keys = Object.keys(clusterdata["images"]) 

	for (var i in image_keys) {
		clusterdata["lookup"][image_keys[i]] = "images";
	}

	/*----------  Networks  ----------*/

	var nova_network_keys = Object.keys(clusterdata["networks"]) 

	for (var i in nova_network_keys) {
		clusterdata["lookup"][nova_network_keys[i]] = "networks";
	}

	/*----------  Ports  ----------*/

	var port_keys = Object.keys(clusterdata["ports"]) 

	for (var i in port_keys) {
		clusterdata["lookup"][port_keys[i]] = "ports";
	}

	/*----------  Security Groups  ----------*/

	var security_keys = Object.keys(clusterdata["security_groups"]) 

	for (var i in security_keys) {
		clusterdata["lookup"][security_keys[i]] = "security_groups";
	}

	/*----------  SubNets  ----------*/

	var subnet_keys = Object.keys(clusterdata["subnets"]) 

	for (var i in subnet_keys) {
		clusterdata["lookup"][subnet_keys[i]] = "subnets";
	}


	addEventListeners();
	createHeatmap();
}

/**
 * Adds an existing network to the Dashboard
 * @param {[string]} key [The Network ID]
 */
function addNetworkToDash(key) {
	clusterdata["lookup"][key] = "neutronnetwork";
	addToListPane(key, "net", clusterdata["neutronnetwork"][key]["name"]);

	if (clusterdata["neutronnetwork"][key]["router:external"] == true) { addNodeToForceGraph(key, "netpub", 30); }
	else {	addNodeToForceGraph(key, "net", 25); }

	$("#circle" + key).dblclick(function(){
		loadNetRightPaneInfo(this.id.substring(6))
	});

}

/**
 * Adds an existing router to the Dashboard
 * @param {[string]} key [The ID of the Router]
 */
function addRouterToDash(key) {
	clusterdata["lookup"][key] = "routers";
	addToListPane(key, "rou", clusterdata["routers"][key]["name"]);
	addNodeToForceGraph(key, "rou", 25);
	//console.log("No issues so far")
	var port_keys = Object.keys(clusterdata["ports"]);

	for (var j in port_keys) {
		var porkey = port_keys[j]
		
		// TODO: Can the below be simplified, seems a waste to scan through each port just to find correct networks
		// Same is happening in right pane load for routers
		if (clusterdata["ports"][porkey]["device_id"] == key) {
			var portnet = clusterdata["ports"][porkey]["network_id"];
			addLinkToForceGraph(key, portnet);
		}
	}
	$("#circle" + key).dblclick(function() {
		loadRouRightPaneInfo(this.id.substring(6))
	});
}

/**
 * Adds an existing server to the Dashboard
 * @param {[string]} key [The instance_id of the server]
 */
function addServerToDash(key) {
	clusterdata["lookup"][key] = "servers";
	addNodeToForceGraph(key, "serv", 18);
	addToListPane(key, "serv", clusterdata["servers"][key]["name"]);
	$("#" + key).click(function(){loadInstRightPaneInfoRef(this.id); /*$("#" + key).data("opentips")[0].hide()*/});
	$("#circle" + key).dblclick(function(){loadInstRightPaneInfoRef(this.id.substring(6)); /*$("#" + key).data("opentips")[0].hide()*/});
	//$("#" + key).dblclick(function(){alert("You just double clicked on " + clusterdata["servers"][key]["name"] );});
	$("#" + key).bind("contextmenu", function(){alert("You just opened a context menu and clicked on " + clusterdata["servers"][key]["name"] );})
	//$("#" + Object.keys(servers)[i]).mouseenter(function(){loadTooltipInfo(Object.keys(servers)[i]);})
	//$("#" + Object.keys(servers)[i]).mouseleave(function(){$("#" + Object.keys(servers)[i]).data("opentips")[0].hide();})
	for (var j in clusterdata["servers"][key]["addresses"]) {
		// TODO: We shouldn't need to check this every time, perhaps edit server data at start to set network by ID not name?
		var net = getNetworkByName(j);
		addLinkToForceGraph(key, net);
	}
	clusterdata["servers"][key]["statistics"] = {};
	clusterdata["servers"][key]["statistics"]["cpu_util"] = {}
	clusterdata["servers"][key]["statistics"]["network.flow.bytes"] = {}
}

/**
 * Adds an existing volume to the Dashboard
 * @param {[string]} key [The volume_id of the volume]
 */
function addVolumeToDash(key) {
	clusterdata["lookup"][key] = "volumes";
	addNodeToForceGraph(key, "vol", 12)


	// The parameter name seems to have changed between OpenStack versions so let's sanity check first.
	var name = clusterdata["volumes"][key]["name"]
	if (name === undefined) {
		name = clusterdata["volumes"][key]["display_name"];
	}

	addToListPane(key, "vol", name)

	for (var j in clusterdata["volumes"][key]["attachments"]) {
		addLinkToForceGraph(key, clusterdata['volumes'][key]["attachments"][j]["server_id"]);
	}
	$("#circle" + key).dblclick(function(){
		loadVolRightPaneInfo(this.id.substring(6))
	});
}

function getEntityType(key) {
	return clusterdata["lookup"][key];
}

/**
 * Returns a new random resource ID
 * @return {[type]} [description]
 */
function inventResourceID() {
	function s4() { return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1); }
	return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
}

/**
 *	One function to clean up unecessary data and return it in a format where the key is ID
 *
 *	@param data		A string formatted JSON with an odd key, and an ID somewhere within.
 *	@return 		a cleaned up JSON Object
 */
function cleanJsonByID(data) {
	var t = JSON.parse(data);
	var title = Object.keys(t);
	t = t[title];

	var x = {}
	for (i = 0; i < t.length; i++) {
		x[t[i]["id"]] = t[i];
	}
	return x;
}

/**
 * Create a network of components randomly for testing
 * @param  {[int]} size [The approximate size of the cluster to create (in VMs)]
 */
function createRandomCluster(size) {

	var pubnetwork_id = inventResourceID();
	var pubnetwork_name = "publicnetwork-" + pubnetwork_id;
	clusterdata["neutronnetwork"][pubnetwork_id] = {"admin_state_up": true, "id": pubnetwork_id, "name": pubnetwork_name, "router:external": true, "shared": false, "status": "ACTIVE", "subnets": ["12345"], "tenant_id": "72cdf4b772444f55bdbf7b050021f628" };
	addNetworkToDash(pubnetwork_id);

	var image_ids = Object.keys(clusterdata["images"])
	var first = true;
	// Create a public network
	while (size > 0) {


		var network_id = inventResourceID();
		//console.log(network_id)
		var network_name = "network-" + network_id;
		clusterdata["neutronnetwork"][network_id] = {"admin_state_up": true, "id": network_id, "name": network_name, "router:external": false, "shared": false, "status": "ACTIVE", "subnets": ["12345"], "tenant_id": "72cdf4b772444f55bdbf7b050021f628" };
		addNetworkToDash(network_id);

		if (Math.random() > 0.5 || first == true) {
			router_id = inventResourceID();
			var router_name = "router-" + router_id;
			clusterdata["routers"][router_id] = {"status":"ACTIVE","external_gateway_info":{"network_id": pubnetwork_id,"enable_snat":true},"name": router_name,"admin_state_up":true,"tenant_id":"72cdf4b772444f55bdbf7b050021f628","routes":[],"id": router_id}
			var pubport_id = inventResourceID();
			clusterdata["ports"][pubport_id] = {"status":"ACTIVE","name":"","allowed_address_pairs":[],"admin_state_up":true,"network_id":pubnetwork_id,"tenant_id":"72cdf4b772444f55bdbf7b050021f628","extra_dhcp_opts":[],"device_owner":"network:router_interface","mac_address":"fa:16:3e:e1:e2:37","fixed_ips":[{"subnet_id":"a43db26b-925f-4ff9-a3be-9ce1a95ef191","ip_address":"192.168.20.1"}],"id":pubport_id,"security_groups":["2d615edb-266e-40ac-b7ea-e5436915b25c"],"device_id": router_id};
			addRouterToDash(router_id)
			first = false;
		}

		port_id = inventResourceID();
		clusterdata["ports"]["port_id"] = {"status":"ACTIVE","name":"","allowed_address_pairs":[],"admin_state_up":true,"network_id":network_id,"tenant_id":"72cdf4b772444f55bdbf7b050021f628","extra_dhcp_opts":[],"device_owner":"network:router_interface","mac_address":"fa:16:3e:e1:e2:37","fixed_ips":[{"subnet_id":"a43db26b-925f-4ff9-a3be-9ce1a95ef191","ip_address":"192.168.20.1"}],"id":port_id,"security_groups":["2d615edb-266e-40ac-b7ea-e5436915b25c"],"device_id": router_id};

		addLinkToForceGraph(router_id, network_id);


		var image = image_ids[Math.floor(Math.random() * image_ids.length)];
		for (var i = Math.random() * 12 + 3; i > 0; i --) {
			var instance_id = inventResourceID();
			var instance_name = "dummy_server-" + instance_id;
			clusterdata["servers"][instance_id] = {"OS-EXT-STS:task_state":null,"addresses":{},"links":[{"href":"http://us-texas-1.cisco.com:8774/v2/72cdf4b772444f55bdbf7b050021f628/servers/1e3c47f1-7275-4af4-b362-e527171f6b84","rel":"self"},{"href":"http://us-texas-1.cisco.com:8774/72cdf4b772444f55bdbf7b050021f628/servers/1e3c47f1-7275-4af4-b362-e527171f6b84","rel":"bookmark"}],"image":{"id":image,"links":[{"href":"http://us-texas-1.cisco.com:8774/72cdf4b772444f55bdbf7b050021f628/images/4ceaf1e6-69bb-49ad-8f15-a30f3dc4004b","rel":"bookmark"}]},"OS-EXT-STS:vm_state":"active","OS-SRV-USG:launched_at":"2014-05-16T18:57:07.000000","flavor":{"id":1,"links":[{"href":"http://us-texas-1.cisco.com:8774/72cdf4b772444f55bdbf7b050021f628/flavors/b4839a95-fed5-4198-bfd1-0d4105044e69","rel":"bookmark"}]},"id":instance_id,"security_groups":[{"name":"default"},{"name":"elasticsearch"}],"user_id":"d7776f89e40942bb9ec675cb9e26e52f","OS-DCF:diskConfig":"MANUAL","accessIPv4":"","accessIPv6":"","progress":0,"OS-EXT-STS:power_state":1,"OS-EXT-AZ:availability_zone":"alln01-1-csx","config_drive":"","status":"ACTIVE","updated":"2014-05-16T18:57:07Z","hostId":"a68025b956ba8e07af877f6c49443d304d2ee959aaafa7e3d55fb2d3","OS-SRV-USG:terminated_at":null,"key_name":"throwaway","name": instance_name,"created":"2014-05-16T18:56:59Z","tenant_id":"72cdf4b772444f55bdbf7b050021f628","os-extended-volumes:volumes_attached":[{"id":"83b95885-8798-4ee1-9e6c-d3291a889428"}],"metadata":{}}
			clusterdata["servers"][instance_id]["addresses"][network_name] = [{"OS-EXT-IPS-MAC:mac_addr":"fa:16:3e:68:d6:35","version":4,"addr":"192.168.20.19","OS-EXT-IPS:type":"fixed"}];
			addServerToDash(instance_id)
			size --;
			if (Math.random() > 0.3) {
				for (var j = Math.random() * 5; j > 1; j--) {
					var volume_id = inventResourceID();
					var volume_name = "dummy_volume-" + volume_id;
					clusterdata["volumes"][volume_id] = {"status":"in-use","display_name": volume_name,"attachments":[{"device":"vda","server_id":instance_id,"volume_id":volume_id,"host_name":null,"id": volume_id}],"availability_zone":"nova","bootable":"true","created_at":"2014-05-16T18:47:04.000000","display_description":null,"volume_type":"None","snapshot_id":null,"source_volid":null,"size":50,"id": volume_id,"metadata":{"readonly":"False","attached_mode":"rw"}}
					addVolumeToDash(volume_id);
				}
			}
			
		}
	}
}

function addDummyImages() {

	var list = ["ubuntu", "redhat", "suse", "linux", "wordpress", "windows", "centos", "fedora", "debian", "hadoop", "magento", "drupal", "android", "noideawhatthisimageis"]

	for (var i in list) {
		var image_id = inventResourceID();
		clusterdata["images"][image_id] = getStructure(image_id, list[i]);
	}

	function getStructure(id, name) {
		return {"status":"ACTIVE","updated":"2014-05-02T21:39:06Z","name":name,"links":[{"href":"http://us-texas-1.cisco.com:8774/v2/72cdf4b772444f55bdbf7b050021f628/images/4ceaf1e6-69bb-49ad-8f15-a30f3dc4004b","rel":"self"},{"href":"http://us-texas-1.cisco.com:8774/72cdf4b772444f55bdbf7b050021f628/images/4ceaf1e6-69bb-49ad-8f15-a30f3dc4004b","rel":"bookmark"},{"href":"http://10.202.4.8:9292/72cdf4b772444f55bdbf7b050021f628/images/4ceaf1e6-69bb-49ad-8f15-a30f3dc4004b","type":"application/vnd.openstack.image","rel":"alternate"}],"created":"2014-05-02T21:25:48Z","minDisk":0,"progress":100,"minRam":0,"metadata":{},"id":id,"OS-EXT-IMG-SIZE:size":1033895936}
	}
}

/**
 * Simple function to create a random cluster, for testing
 * @param  {[int]} size [The number of instances to create (roughly)]
 */
function developerMode(size) {
	plot_heatmap = false;
	addDummyImages();
	createRandomCluster(size);
}

/**
 * Reloads Event Listeners on the Search Table
 */
function addEventListeners() {

  $('#entity-table tbody tr').click(function() {
	$('#entity-table tbody tr').removeClass('list-selected-item');
	$(this).addClass('list-selected-item');
  });

  $('#entity-table tbody tr').dblclick(function() {
	var aPos = $('#entity-table').dataTable().fnGetPosition(this);
	var aData = $('#entity-table').dataTable().fnGetData(aPos[4]);
	var type = aData[aPos][1];
	if (type == "serv") {  	loadInstRightPaneInfoRef(aData[aPos][0])    }
	else if (type == "rou") {  	loadRouRightPaneInfo(aData[aPos][0])    }
	else if (type == "net") {  	loadNetRightPaneInfo(aData[aPos][0])    }
	else if (type == "vol") {  	loadVolRightPaneInfo(aData[aPos][0])    }
	else { 	console.log("I don't know what entity type you clicked, but I don't know what to do with it...")    }
  });
}

/**
 *	Loads a new force graph in the center pane.
 */
function loadNewForceGraph() {

	var w = $('#pane-center').width();
	var h = $('#pane-center').height();

	forceGraphData = {	nodes: [/*{ name: "globalendpoint", type: "endpoint", size: 26 }*/], edges: [ /*{ source: 0, target: 1 }*/ ] };

	force = d3.layout.force()
						 .nodes(forceGraphData.nodes)
						 .links(forceGraphData.edges)
						 .size([w, h])
						 .linkDistance(function(d){return getNodeLinkSize(d.source.type)})
						 //.linkStrength(.5)
						 .gravity(0.12)//(function(d) { return getNodeGravity(d.type) })
						 //.friction(.5)
						 .charge(function(d) { return getNodeCharge(d.type) });

	svg = d3.select("#pane-center").append("svg").attr("width", w).attr("height", h)
						.call(zoom = d3.behavior.zoom().scaleExtent([0.2, 5])
							.on("zoom", redraw))
							.on("dblclick.zoom", null)
							.on("contextmenu.zoom", null);

	innervis = svg.append("svg:g").append("svg:g");

	innervis.append("g").attr("class", "links");
	innervis.append("g").attr("class", "nodes");

	edges = svg.select(".links").selectAll("line");
	nodes = svg.select(".nodes").selectAll("circle");	

	//Every time the simulation "ticks", this will be called
	force.on("tick", function() {
		edges.attr("x1", function(d) { return d.source.x; })
			 .attr("y1", function(d) { return d.source.y; })
			 .attr("x2", function(d) { return d.target.x; })
			 .attr("y2", function(d) { return d.target.y; });

		// @TODO: Below is a very silly way to do this, couldn't think of another for now.
		nodes.attr("transform", function(d) { return "translate(" + (d.x - getIconOffset(d.type, "x", d.name)) + "," + (d.y - getIconOffset(d.type, "y", d.name)) + "), scale(" + getIconScale(d.type, d.name) + ")"; })
				.attr("child", function(d) { $("#circle" + d.name).attr("transform", "translate(" + d.x + "," + d.y + ")"); return "updated"; })
				.attr("text", function(d) { $("#label-" + d.name).attr("transform", "translate(" + d.x + "," + (d.y + 40) + ")"); return "updated"; });

	});
}

/**
 *	Updates the force Simulation. Call every time we make a change to restart the simulation
 */
function updateForceGraph() {
	edges = edges.data(forceGraphData.edges, function(d) { return d.source.index + "-" + d.target.index; });
	edges.enter().append("line").style("stroke", "#ccc").style("stroke-width", 3);
	edges.exit().remove();

	nodes = nodes.data(forceGraphData.nodes, function(d) {  return d.name;})

	nodes.enter().append("circle").attr("id", function(d) { return "circle" + d.name })
		.attr("r", function(d) { return d.size })
		.style("opacity", function(d) {return getNodeOpacity(d.name)})
		.style("fill", function(d, i) {	return d3.rgb(getNodeColor(d.type)); })
		.attr("stroke-width", function(d){if (d.type == "serv"){return 2} else {return 0}})
		.attr("stroke", function(d){if (d.type == "serv") {return getServerStateColor(d.name)} else {return "transparent"} })
		.call(force.drag).on("mousedown", disableRedraw).on("mouseup", enableRedraw).transition()
	  .duration(750)
	  .ease("elastic");

	nodes.enter().append('text').text(function(d) {return d.name}).attr("id", function(d) { return "label-" + d.name }).attr('class', 'label hidden').attr('text-anchor', 'middle')

	nodes.enter().append("path").attr("d", function(d) {return getNodeShape(d.type, d.name)}).attr("id", function(d) { return d.name })
	.style("fill", function(d, i) {	return d3.rgb("#FFF"); }).attr("class" ,"nodeicon")
	//.attr("transform", function(d) { console.log(d); return "translate(" + (d.x - getIconOffset(d.type, "x", d.name)) + "," + (d.y - getIconOffset(d.type, "y", d.name)) + "), scale(" + getIconScale(d.type, d.name) + ")"; })
		.on("mousedown", disableRedraw).on("mouseup", enableRedraw);

	nodes.exit().remove();
	force.start();
}

/**
 *	Make sure we don't zoom/pan, and save the current zoom/pan settings
 */
function disableRedraw() {
	event.preventDefault();
	//console.log("disabling");
	node_clicked = true;
	scale_save = zoom.scale();
	translate_save = zoom.translate();
}

/**
 *	Re enable zoom/pan and reset settings to what they were before we clicked
 */
function enableRedraw() {
	//console.log("enabling")
	node_clicked = false;
	zoom.scale(scale_save);
	zoom.translate(translate_save);
	// console.log("set redraw false")
}

/**
 *	Redraw the scale and translation of an svg element
 */
function redraw(entity) {
	//console.log(node_clicked)
	if (node_clicked == false) {
		innervis.attr("transform", "translate(" + d3.event.translate + ")" + " scale(" + d3.event.scale + ")");
		var scale = d3.event.scale;
		offsetx = 18 * scale;
		offsety = 18 * scale;
	}
}

/**
 *	Reset the viewport back to its initial zoom/pan
 */
function resetZoom() {
	zoom.scale(1);
	zoom.translate([0,0]);
	innervis.attr("transform", "translate(" + zoom.translate() + ")" + " scale(" + zoom.scale() + ")");
}

/**
 *	Returns a colour depending on the state of an instance
 *
 *	@param 	name 	the ID of the element. Used to lookup it's status.
 */
function getServerStateColor(name) {
	var state = clusterdata["servers"][name]["status"];
	if (state == "ACTIVE") {return "#5cb85c";}
	else if (state == "ERROR") {return "#f0ad4e"}
	else if (state == "BUILD") {return "#428bca"}
	else {return "#d9534f";}
}

/**
 *  Returns a charge value depending on the type of node
 *
 *  @param	type	The element type (server, volume, net etc)
 */
function getNodeCharge(type) {
	//console.log(type);
	if (type == "serv") {return [-1000]; }
	else if (type == "vol") { return [-400];	}
	else if (type == "net") { return [-4000]; }
	else if (type == "rou") { return [-5000]; }
	else { return [-800]; }
}

/**
 *  Returns a charge value depending on the type of node
 *
 *  @param	type	The element type (server, volume, net etc)
 */
function getNodeGravity(type) {
	return 0.12;

	if (type == "rou") {return [0.12]; }
	else { return [0.12]; }
}

/**
 *	Returns the colour of a node depending on it's type
 *
 *	@param 	type 	The element type (server, volume, net etc)
 */
function getNodeColor(type) {
	//console.log(type);
	if (type == "serv") {return "#678"; }
	else if (type == "vol") { return "#ffa03a";	}
	else if (type == "net") { return "brown"; }
	else if (type == "rou") { return "purple"; }
	else { return "#087000"; }
}

// TODO: Currently unimplemented. On redraw, any node id in this array will be set to full opacity, and others to 50%
var current_selection = []

/**
 *	Returns the opacity of a node. 100% if selection is empty or it is in selection, else 50% 
 *
 *	@param 	name 	the ID of the element. Used to see if it's in the list
 */
function getNodeOpacity(name) {
	//console.log(!current_selection);
	if (current_selection.length === 0) {	return 1;	}
	else {
		if (current_selection.indexOf(name) >= 0) {	return 1;	}
		else {	return 0.5	}
	}
}

/**
 *	Returns the size of a link depending on the type of elements it connects
 *
 *	@param 	type 	The element type (server, volume, net etc)
 */
function getNodeLinkSize(type) {
	// @TODO Add the ability to collapse a network, which sets the link length to very small and makes instances zoom into and partially hide behind it's network
	if (type == "serv") { return 150; }
	else if (type == "vol") { return 1;	}
	else if (type == "net"){ return 200; }
	else if (type == "rou"){ return 200; }
	else { return 550; }
}

/**
 *	Returns the SVG path for an element depending on type
 *
 *	@param 	type 	The element type (server, volume, net etc)
 *	@param 	name 	the ID of the element. Used to see if it's in the list. optional (if not a server)
 */
function getNodeShape(type, name) {
	if (type == "serv") { 
		var imagename = getInstanceImage(name).toLowerCase();
		//console.log(imagename)
		if (imagename.indexOf("ubuntu") != -1) { return nodePaths["ubuntu"]; }
		else if (imagename.indexOf("windows") != -1) { return nodePaths["windows"]; }
		else if (imagename.indexOf("linux") != -1 ||  imagename.indexOf("cirros") != -1 || imagename.indexOf("unix") != -1) { return nodePaths["linux"]; }
		else if (imagename.indexOf("redhat") != -1 || imagename.indexOf("rhel") != -1) { return nodePaths["redhat"]; }
		else if (imagename.indexOf("centos") != -1) { return nodePaths["centos"]; }
		else if (imagename.indexOf("fedora") != -1) { return nodePaths["fedora"]; }
		else if (imagename.indexOf("debian") != -1) { return nodePaths["debian"]; }
		else if (imagename.indexOf("suse") != -1) { return nodePaths["suse"]; }
		else if (imagename.indexOf("android") != -1) { return nodePaths["android"]; }
		else if (imagename.indexOf("hadoop") != -1 ||  imagename.indexOf("savanna") != -1 ||  imagename.indexOf("sahara") != -1 ) { return nodePaths["hadoop"]; }
		else if (imagename.indexOf("wordpress") != -1) { return nodePaths["wordpress"]; }
		else if (imagename.indexOf("magento") != -1) { return nodePaths["magento"]; }
		else if (imagename.indexOf("drupal") != -1) { return nodePaths["drupal"]; }
		else { return nodePaths["port"]; }
	}
	else if (type == "vol") { return nodePaths["volume"]; }
	else if (type == "net"){ return  nodePaths["network"]; }
	else if (type == "netpub") {return nodePaths["publicnetwork"]}
	else if (type == "rou"){ return  nodePaths["router"] }
	else { return nodePaths["undefined"] }
}

/**
 *	Returns the image name for a particular instance ID
 *	
 *	@param 	id 	the ID of the element.
 */
function getInstanceImage(id) {
	var imageid = clusterdata["servers"][id]["image"]["id"];
	if (clusterdata["images"][imageid] === undefined) {
		return "undefined"
	}
	return clusterdata["images"][imageid]["name"];
}

function getIconScale(type, name) {
	if (type == "serv") { return 1 }
	else if (type == "vol") { return 0.6;}
	else if (type == "netpub"){ return 1.5; }
	else if (type == "net"){ return 1.36; }
	else if (type == "rou"){ return 1; }
	else { return 1; }
}

function getIconOffset(type, axis, name) {
	if (type == "vol") { if (axis == "x") {return 10;}	else {return 7.5} }
	else if (type == "serv") { 
		var imagename = getInstanceImage(name).toLowerCase();
		//console.log(imagename);
		if (imagename.indexOf("ubuntu") != -1) { if (axis == "x") { return 14.3; } else { return 12.67 } }
		else if (imagename.indexOf("windows") != -1) { if (axis == "x") { return 11.7; } else { return 11 } }
		else if (imagename.indexOf("linux") != -1 ||  imagename.indexOf("cirros") != -1 || imagename.indexOf("unix") != -1) { if (axis == "x") { return 10.8; } else { return 14.33 } }
		else if (imagename.indexOf("redhat") != -1 || imagename.indexOf("rhel") != -1 ) { return 14.748858; } 
		else if (imagename.indexOf("centos") != -1 ) { return 12.50; }
		else if (imagename.indexOf("fedora") != -1 ) { if (axis == "x") { return 10; } else { return 12 } }
		else if (imagename.indexOf("debian") != -1) { if (axis == "x") {return 12;} else {return 13.10} }
		else if (imagename.indexOf("suse") != -1) { if (axis == "x") {return 14;} else {return 12} }
		else if (imagename.indexOf("android") != -1) { if (axis == "x") {return 11;} else {return 13} }
		else if (imagename.indexOf("drupal") != -1 ) { if (axis == "x") {return 11;} else {return 14} }
		else if (imagename.indexOf("hadoop") != -1 ||  imagename.indexOf("savanna") != -1 ||  imagename.indexOf("sahara") != -1 ) { if (axis == "x") { return 13.3; } else { return 10 } }
		else if (imagename.indexOf("magento") != -1) {if (axis == "x") { return 12; } else { return 14 }}
		else if (imagename.indexOf("wordpress") != -1) {return 14.748858}
		else {  return 12; }
	}
	else if (type == "netpub"){ return 23; }
	else if (type == "net"){ if (axis == "x") { return 21.5; } else { return 22; } }
	else if (type == "rou"){ return 15; }
	else { return 1; }
}

/**
 * Returns the ID of the network with the give name.
 *
 * @param name 	The unique name of the node. Must be unique
 */
function getNetworkByName(name) {
	for (var i in clusterdata["neutronnetwork"]) {
		if (clusterdata["neutronnetwork"][i]["name"] == name) {
			return i;
		}
	}
	return undefined;
}

/**
 * Returns the ID of the security group with the give name.
 *
 * @param name 	The unique name of the node. Must be unique
 */
function getSecurityGroupByName(name) {
	for (var i in clusterdata["security_groups"]) {
		if (clusterdata["security_groups"][i]["name"] == name) {
			return i;
		}
	}
	return undefined;
}

/**
 *	Adds a node to the force layout
 *
 *	@param name		The unique name of the node. Must be unique
 *	@param type 	What the node represents, currently just instance and volume.
 */
function addNodeToForceGraph(name, type, size) {
	if (size === undefined) { size = 16; }

	forceGraphData.nodes.push({name: name, type: type, size: size});
	updateForceGraph();
}

function getNodeIndexByName(name) {
	return forceGraphData.nodes.filter(function(node) {return node['name'] == name})[0]['index'];
}

/**
 *	Adds a connection between two nodes in the force layout
 *
 *	@param node1	The first node to connect, identified by Name
 *	@param node2 	The second node to connect, identified by Name
 */
function addLinkToForceGraph(node1, node2) {
	// First we need to find the index of each node
	var n1 = getNodeIndexByName(node1);
	var n2 = getNodeIndexByName(node2);
	forceGraphData.edges.push({source: n1, target: n2});

	updateForceGraph();
}

/**
 *	Adds a new heatmap
 */
function createHeatmap() {
	var config = {
		"width": window.screen.width,//$('#pane-center').width(),
		"height": window.screen.height,//$('#pane-center').height(),
		"radius": 150,
		"element": document.getElementById("pane-center"),
		"visible": true,
		"opacity": 25,
		"gradient": { 0.0: "rgb(0,0,197)", 0.3: "rgb(0,255,255)", 0.6: "rgb(0,255,0)", 0.8: "yellow", 1: "rgb(255,0,0)" }
	};

	heatmap = h337.create(config);

	//heatmap.store.setDataSet({ max: 100, data: []});

	getServerData(saveCpuUtil, "get cpu");

	setTimeout(function() {updateHeatmapReal();}, 3000)
}


function setButtonStates() {
	$("#btn-toggle-heat").button('toggle');
	$("#btn-toggle-hdd").button('toggle');
	$("#btn-toggle-ntwk").button('toggle');
	$("#btn-toggle-alert").button('toggle');
}

/**
 * Save a list of timestamped CPU util resources into the cluster data packet.
 * @param  {[Object]} data [The Data to save]
 */
function saveCpuUtil(data) {
	var cpu_list = JSON.parse(data);
	var keys = Object.keys(cpu_list)

	for (var i in keys) {
		var key = keys[i]
		var util = cpu_list[key];

		var dates = Object.keys(util)
		for (var j in dates) {
			if (clusterdata["servers"][key]) {
				var date = dates[j]
				clusterdata["servers"][key]["statistics"]["cpu_util"][date] = util[date];
			}
		}
	}
	
	if (get_cpu_util == true) {
		setTimeout(function() {getServerData(saveCpuUtil, "get cpu");}, 2000);
	}
}

/**
 * Updates the heatmap. If passed data, uses that, otherwise pulls the latest value clusterdata
 * @param  {[Object]} data [Optional: CPU Data]
 */
function updateHeatmapReal(data) {
	heatmap.store.setDataSet({ max: 100, data: []});
	// This condition will never be met now, kept in in case.
	if (data) {
		util = JSON.parse(data);
		for (var i in util) {
			var node = "#circle" + i;
			//console.log(node);
			var node_heat_x = $(node).position()['left'] + offsetx;
			var node_heat_y = $(node).position()['top'] + offsety;
			heatmap.store.addDataPoint(node_heat_x, node_heat_y, util[i]/*getElementHeat(Object.keys(servers)[i])*/);
		}
	}
	else {
		for (var i in clusterdata["servers"]) {
			if (clusterdata["servers"][i]["statistics"]["cpu_util"] && clusterdata["servers"][i]["status"] != "SHUTOFF") {
				var node = "#circle" + i;
				var latestdate = Object.keys(clusterdata["servers"][i]["statistics"]["cpu_util"]).sort().pop()
				var value = clusterdata["servers"][i]["statistics"]["cpu_util"][latestdate];
				var node_heat_x = $(node).position()['left'] + offsetx;
				var node_heat_y = $(node).position()['top'] + offsety;
				heatmap.store.addDataPoint(node_heat_x, node_heat_y, value);
			}
		}
		//console.log(heatmap.store.exportDataSet())
		if (plot_heatmap == true) {
			setTimeout(updateHeatmapReal, 1000);
		}
		else {
			heatmap.store.setDataSet({ max: 100, data: []});
		}
	}
}

/**
 *	Load a graph in the top pane.
 */
function loadTopGraph(){
	var w = $("body").width() - 2
	graph = new Rickshaw.Graph( {
		element: document.querySelector('#graph'),
		series: [
			{ color: 'steelblue', data: [ { x: 0, y: 23}, { x: 1, y: 15 }, { x: 2, y: 79 } ]}, 
			{ color: 'lightblue', data: [ { x: 0, y: 30}, { x: 1, y: 20 }, { x: 2, y: 64 } ]}
		],
		height: 100,
		width: w
	});

	graph.render();
}

/**
 * Opens the sidebar locked to the entity data table
 */
function openSearch() {
	// TODO: This is full of UX glitches
	myLayout.slideOpen('west');
	$("#fake-search").animate({width: $("#pane-west").width() - 35}, 1000);
}

function closeSearch() {
	$("#fake-search").animate({width: 200}, 1000);
}

function loadListPane() {
	$('#entity-table').dataTable( {
		"bPaginate": false,
		"bLengthChange": false,
		"bFilter": true,
		"bSort": true,
		"bInfo": false,
		"bAutoWidth": false
	} );

	$('#entity-table').dataTable().fnSetColumnVis( 0, false );

	// $("#entity-table_filter").attr("class", "fake-search");
	// $("#entity-table_filter input").attr("class", "form-control");
}


function filter() {
	var string = $('#fake-search-box').val();
	$('#entity-table').dataTable().fnFilter(string);
}

/**
 *	Add an item to the list pane
 *
 *	@param 	id		Element id
 *	@param 	name 	Name of the element
 */
function addToListPane(id, type ,name) {
  $('#entity-table').dataTable().fnAddData( [id, type ,name] );
}

/**
 * Converts a date into a sting of the length of time from the current date in the form of "xd yh zm"
 * where x is the number of days, y is the number of hours, and z is the number of minutes.
 *
 * @param  	createdOn	 The date to be used in calculation.
 */
function calculateUptime(createdOn) {
	uptimeMili = (new Date().getTime()) - (new Date(createdOn).getTime());
	uptimeDays = Math.floor(uptimeMili / 60000 / 60 / 24)
	uptimeHours = Math.floor(uptimeMili/60000/60)-uptimeDays*24;
	uptimeMins = Math.floor(uptimeMili/60000)-(((uptimeDays*24)+uptimeHours)*60);
	if (uptimeDays == 0) {
		if (uptimeHours == 0) {
			uptimeString = uptimeMins + "m";
		}
		else {
			uptimeString = uptimeHours + "h " + uptimeMins + "m";
		}
	}
	else {
		uptimeString = uptimeDays + "d " + uptimeHours + "h " + uptimeMins + "m";
	}	
	return uptimeString;
}

/**
 *	Loads the help screen content to the modal box
 *
 */
function loadHelp() {
	$("#myModalLabel").html("Help (?)");

	var content = "";

	content += "Welcome to AVOS (Advanced Visualisation on OpenStack) <br/> There's a lot of functionality here, so here's some help to get you started!<hr />"
	content += "<svg width='800' height='300'>"

		content += "<rect width='275' height='130' style='fill:rgb(245,245,245)'></rect>"
		content += "<circle r='25' stroke-width='0' stroke='transparent' transform='translate(50, 50)' style='fill: rgb(165, 42, 42);'></circle>";
		content += "<path d='" + nodePaths['network'] + "' class='nodeicon' transform='translate(26,25), scale(1.5)' style='fill: rgb(255, 255, 255);'></path>";
		content += "<text x='150' y='55' style='font-size: 28'>Network</text>"
		content += "<text x='28' y='95' style='fill: rgb(165, 42, 42)'>Private</text>"
		content += "<text x='80' y='95' style='fill: rgb(8, 112, 0)'>Public</text>"

		content += "<circle r='30' stroke-width='0' stroke='transparent' transform='translate(100, 47)' style='fill: rgb(8, 112, 0);'></circle>";
		content += "<path d='" + nodePaths['publicnetwork'] + "' class='nodeicon' transform='translate(76,23), scale(1.5)' style='fill: rgb(255, 255, 255);'></path>"

		content += "<rect width='275' height='130'  x='280' style='fill:rgb(245,245,245)'></rect>"
		content += "<circle r='25' stroke-width='0' stroke='transparent' transform='translate(330, 50)' style='fill: rgb(128, 0, 128);'></circle>";
		content += "<path d='" + nodePaths['router'] + "' class='nodeicon' transform='translate(315,35), scale(1)' style='fill: rgb(255, 255, 255);'></path>"
		content += "<text x='380' y='55' style='font-size: 28'>Router</text>"

		content += "<rect width='275' height='140' y='140' style='fill:rgb(245,245,245)'></rect>"
		content += "<circle r='25' stroke-width='2' stroke='#d9534f' transform='translate(40, 240)' style='fill: rgb(102, 119, 136);'></circle>";
		content += "<path d='" + nodePaths['ubuntu'] + "' class='nodeicon' transform='translate(17,217), scale(1.45)' style='fill: rgb(255, 255, 255);'></path>"

		content += "<circle r='25' stroke-width='2' stroke='#5cb85c' transform='translate(40, 180)' style='fill: rgb(102, 119, 136);'></circle>";
		content += "<path d='" + nodePaths['linux'] + "' class='nodeicon' transform='translate(17,157), scale(1.5)' style='fill: rgb(255, 255, 255);'></path>";
		content += "<text x='80' y='175' style='font-size: 24'>Virtual Machine</text>"
		content += "<text x='100' y='210' style='fill: #5cb85c;'>ACTIVE</text>"
		content += "<text x='170' y='210' style='fill: #d9534f;'>SHUTOFF</text>"
		content += "<text x='100' y='250' style='fill: #428bca;'>BUILD</text>"
		content += "<text x='170' y='250' style='fill: #f0ad4e;'>WARNING</text>"

		content += "<rect width='275' height='140' y='140' x='280' style='fill:rgb(245,245,245)'></rect>";
		content += "<text x='380' y='175' style='font-size: 24'>Volume</text>"
		content += "<circle r='22' stroke-width='0' stroke='transparent' transform='translate(330, 220)' style='fill: rgb(255, 160, 58);'></circle>";
		content += "<path d='" + nodePaths['volume'] + "' class='nodeicon' transform='translate(313,209), scale(1)' style='fill: rgb(255, 255, 255);'></path>"

	content += "</svg>";

	content += "<hr /> Double click on any node to see details relating to it.";

	$("#myModalBody").html(content);
}

/**
 *	Loads the help screen content to the modal box
 */
function loadSettings() {
	$("#myModalLabel").html("AVOS Settings");
	$("#myModalBody").html("Here are some settings to customize your experience");
}

/**
 *	Loads the help screen content to the modal box
 *
 *	@param 	element 	jQuery element ID to place the plot in
 *	@param 	data 		OpenStack ID to plot data for. Defaults to whole cloud if not passed.
 */
function loadNewNetworkPlot(element, data) {
	$(element).html("");
	//$(element).prepend("<div id='flows-label'></div>")

	var diameter = 900,
		radius = diameter / 2,
		innerRadius = radius - 250;

	var cluster = d3.layout.cluster()
		.size([360, innerRadius])
		.sort(null)
		.value(function(d) { return d.size; });

	var bundle = d3.layout.bundle();

	var line = d3.svg.line.radial()
		.interpolate("bundle")
		.tension(.85)
		.radius(function(d) { return d.y; })
		.angle(function(d) { return d.x / 180 * Math.PI; });

	var svg = d3.select(element).append("svg")
		.attr("width", diameter)
		.attr("height", diameter)
	  .append("g")
		.attr("transform", "translate(" + radius + "," + radius + ")");

	var link = svg.append("g").selectAll(".link"),
		node = svg.append("g").selectAll(".node");

	var classes = getRandomNetworkPlotData();

	var nodes = cluster.nodes(packageHierarchy(classes)),
	  links = packageImports(nodes);

	link = link.data(bundle(links))
		.enter().append("path")
			.each(function(d) { d.source = d[0], d.target = d[d.length - 1], d.value = getImportValue(d.source["imports"], d.target["name"]) })
			.style("stroke", function(d) { console.log("Connection between " + d.source.name + " & " + d.target.name); return getColorFromLinkValue(d.value);})
			.attr("class", "link")
			.attr("d", line);

	node = node.data(nodes.filter(function(n) { return n.parent; }))
	.enter().append("text")
		.attr("id", function(d) {return d.name})
		.attr("class", "node")
		.attr("dx", function(d) { if (!d.children) {return d.x < 180 ? 8 : -8;} else {return d.x < 180 ? 260 : -260;} })
		.attr("dy", ".31em")
		.attr("transform", function(d) { return "rotate(" + (d.x - 90) + ")translate(" + d.y + ")" + (d.x < 180 ? "" : "rotate(180)"); })
		.style("text-anchor", function(d) { return d.x < 180 ? "start" : "end"; })
		.text(function(d) { if (d.key.length > 20) {return d.key.substring(0,19) + "..."} else {return d.key;} })
		.on("mouseover", mouseovered)
		.on("mouseout", mouseouted);

	function mouseovered(d) {
		node.each(function(n) { n.target = n.source = false; });

		link
			.classed("link--target", function(l) {   if (l.target === d) {return l.source.source = true;} })
			.classed("link--source", function(l) { if (l.source === d) return l.target.target = true; })
			.filter(function(l) { return l.target === d || l.source === d; })
				.each(function() { this.parentNode.appendChild(this); });

		node
			.classed("node--target", function(n) { return n.target; })
			.classed("node--source", function(n) { return n.source; })
			.filter(function(b){return b.key == d.key})
				.text(function(d) {return d.key})
	}

	function mouseouted(d) {
		//$("#flows-label").html(" ")
		link
			.classed("link--target", false)
			.classed("link--source", false);

		node
			.classed("node--target", function(d) { return false})
			.classed("node--source", false)
			.filter(function(b){return b.key == d.key})
				.text(function(d) { if (d.key.length > 20) {return d.key.substring(0,19) + "..."} else {return d.key;} });
	}

	d3.select(self.frameElement).style("height", diameter + "px");
}

// Lazily construct the package hierarchy from class names.
function packageHierarchy(classes) {
  var map = {};

  function find(name, data) {
	var node = map[name], i;
	if (!node) {
	  node = map[name] = data || {name: name, children: []};
	  if (name.length) {
		node.parent = find(name.substring(0, i = name.lastIndexOf(".")));
		node.parent.children.push(node);
		node.key = name.substring(i + 1);
	  }
	}
	return node;
  }

  classes.forEach(function(d) {
	find(d.name, d);
  });

  return map[""];
}

function getRandomColor() {
  return '#'+Math.floor(Math.random()*16777215).toString(16);
}

function getColorFromLinkValue(value) {
	
	if (value == 0) {
		console.log("Value is 0, setting link to transparent!")
		return "transparent";
	}
	else {
		var percent = value / current_max * 100;
		console.log("Value is " + formatSizeUnits(value) + " (" + percent + "%) ");
		//var midval = current_max / 2;
		var r, g, b;
		b = Math.round(0);

		if (percent > 50) {
			r = 255;
			g = Math.round(255 * ((100 - percent) / 100));
		}
		else {
			g = 255;
			r = Math.round(255 * ((100 - percent) / 100));
		}

		var result = "rgb(" + r + ", " + g + "," + b + ")"
		return result
	}
}

function getColourTemp(maxVal, minVal, actual) {
	var midVal = (maxVal - minVal)/2;
	var intR;
	var intG;
	var intB = Math.round(0);

	if (actual >= midVal){
		 intR = 255;
		 intG = Math.round(255 * ((maxVal - actual) / (maxVal - midVal)));
	}
	else{
		intG = 255;
		intR = Math.round(255 * ((actual - minVal) / (midVal - minVal)));
	}

	return to_rgb(intR, intG, intB);
}

// Return a list of imports for the given array of nodes.
function packageImports(nodes) {
  var map = {},
	  imports = [];

  // Compute a map from name to node.
  nodes.forEach(function(d) {
	map[d.name] = d;
  });
  //console.log(map)

  // For each import, construct a link from the source to target node.
  nodes.forEach(function(d) {
	if (d.imports) d.imports.forEach(function(i) {
		//console.log(d.name);
		//console.log(i)
		//console.log(d.name)
		//console.log("connection: " + map[d.name]["name"] + " to " + map[i.name]["name"] + " with a rate of " + i.value);
		imports.push({source: map[d.name], target: map[i.name], value: i.value});
	});
  });

  //console.log(imports);
  return imports;
}

function getImportValue(source, target) {
	for (var i = 0; i < source.length; i++) {
		if (source[i]["name"] == target ) {
			return source[i]["value"];
		}
	}
	return 0;
}

function generateServersForNetworkPlot(number) {
  var temp = [];
  servers = number;
  var server = 0;

  while (servers > 0) {
	server++;
	var vm = 0
	for (i = 0; i < Math.random() * 20; i++) {
	  vm ++;
	  temp.push("BD2-" + server + ".server" + vm)
	  servers --;
	}
  }

  return temp;
}

function generateRealServersForNetworkPlot() {
	var temp = [];

	for (var i in clusterdata["servers"]) {
		//console.log(i);
		var node = {"name": clusterdata["servers"][i]["OS-EXT-SRV-ATTR:hypervisor_hostname"] + "." + clusterdata["servers"][i]["name"], "instance_id": i}
		//console.log(node);
		var name = clusterdata["servers"][i]["name"]
		// if (name.length > 20) {
		// 	name = name.substring(0,19)+"..."
		// 	console.log("Whoa, this server has a long name!")
		// }

		//temp.push(clusterdata["servers"][i]["OS-EXT-SRV-ATTR:hypervisor_hostname"] + "." + name)
		temp.push(node);
		//console.log(clusterdata["servers"][i]["OS-EXT-SRV-ATTR:hypervisor_hostname"] + "." + clusterdata["servers"][i]["name"]);
	}

	return temp;
}

function turnServerListIntoRandomConnections(list) {
  var data = [];

  for (var i = 0; i < list.length; i++) {
	var node = {"name": "servers." + list[i]["name"], "imports": []}
	data.push(node)
  }
  //console.log(data)
  //console.log(data.length)
  for (var j = 0; j < data.length; j++) {
	//console.log("j = " + j)
	for (var k = 0; k < data.length; k++) {
	  if (Math.random() >= 0.95){
		data[j]["imports"].push(data[k]["name"])
		console.log(data[k]);
	  }
	}
  }
  return data;
  // console.log(data);
}

var current_max = 0;

function turnServerListIntoConnections(list) {
	current_max = 0;
  var data = [];

  for (var i = 0; i < list.length; i++) {
	var node = {"name": "servers." + list[i]["name"], "instance_id" : list[i]["instance_id"], "imports": []}
	//console.log(node);
	data.push(node)
  }
  data.push({"name": "servers.OUTSIDE WORLD", "instance_id" : "OUTSIDE", "imports": []})

  //console.log("Pushed all nodes into data");
  
  for (var j = 0; j < data.length; j++) {
	if (data[j]["name"] != "servers.OUTSIDE WORLD" ) {
		var latestdate = Object.keys(clusterdata["servers"][data[j]["instance_id"]]["statistics"]["network.flow.bytes"]).sort().pop();
		var flow = clusterdata["servers"][data[j]["instance_id"]]["statistics"]["network.flow.bytes"][latestdate];
		if (flow !== undefined) {
			//console.log(flow);
			var x = Object.keys(flow);
			//console.log(x)
			for (var k = 0; k < x.length; k++) {
				if (x[k].indexOf("parameters.") != -1 && x[k].indexOf("dhcp") == -1 ) {
					//d.key.substring(10,19)
					var connection = x[k].substring(11,100);
					var val = flow[x[k]]
					if (val > current_max) {
						current_max = parseInt(val);
					}
					//console.log("Val = " + val);
					//console.log(connection);
					if (connection != "OUTSIDE" && clusterdata["servers"][connection] !== undefined) {
						var con = "servers." + clusterdata["servers"][connection]["OS-EXT-SRV-ATTR:hypervisor_hostname"] + "." + clusterdata["servers"][connection]["name"];
						//console.log(con)
						//data[j]["imports"].push(con);
						data[j]["imports"].push({"name": con, "value": val});
						//console.log(data[j]);
					}
					else if (connection == "OUTSIDE") {
						data[j]["imports"].push({"name": "servers.OUTSIDE WORLD", "value": val});
					}
				}
			}
		}
	}
  }
  //console.log(data);
  return data;
}

function getRandomNetworkPlotData() {
  return turnServerListIntoConnections(generateRealServersForNetworkPlot());
}

function saveNetworkFlows(data) {
	flows = JSON.parse(data)
	//console.log(flows)
	// For each instance ID in flows
	for (var i in Object.keys(flows)) {
		var flowkey = Object.keys(flows)[i]
		//console.log(flowkey)
		//console.log(flows[flowkey])
		for (var j in Object.keys(flows[flowkey])) {
			date = Object.keys(flows[flowkey])[j];
			clusterdata["servers"][flowkey]["statistics"]["network.flow.bytes"][date] = JSON.parse(flows[flowkey][date]);
			//console.log(date)
		}
	}
	loadNewNetworkPlot("#myLargeModalContent")
	if (net_flow_live == true) {
		setTimeout(function() {getServerData(saveNetworkFlows, "get network flow")}, 5000);
	}
	//print(flows);
}



$('#myLargeModal').on('hide.bs.modal', function () {
	console.log("Modal Hidden");
	net_flow_live = false;
});

function openNetworkPlot() {
	loadNewNetworkPlot('#myLargeModalContent');
	getServerData(saveNetworkFlows, "get network flow");
	//$('#myLargeModalContent').html();
	$('#myLargeModal').modal('show');
	net_flow_live = true;
}

function formatSizeUnits(bytes){
	bytes = bytes / 8
  if      (bytes>=1073741824) {bytes=(bytes/1073741824).toFixed(2)+' GB';}
  else if (bytes>=1048576)    {bytes=(bytes/1048576).toFixed(2)+' MB';}
  else if (bytes>=1024)       {bytes=(bytes/1024).toFixed(2)+' KB';}
  else if (bytes>1)           {bytes=bytes+' bytes';}
  else if (bytes==1)          {bytes=bytes+' byte';}
  else                        {bytes='0 byte';}
  return bytes;
}


function getInstanceForNetwork() {
	var s = []
	for (var i in clusterdata["servers"]) {
		var connections = []
		for (var j in clusterdata["servers"]){
			if (i != j) {
				if (Math.random() >= 0.75) {
					connections.push(j);
				}
			}
		}
		s.push({"name": clusterdata["servers"][i]["OS-EXT-SRV-ATTR:hypervisor_hostname"] + "." + i, "size": 1, "imports": connections, "host": clusterdata["servers"][i]["OS-EXT-SRV-ATTR:hypervisor_hostname"]});
	}  
	//console.log(s)
	return s;
}

/**
 *	Load's data on a particular instance in the right pane
 *
 *	@element		The string name of the element, excluding #
 */
function loadInstRightPaneInfoRef(element) {
	myLayout.slideOpen('east');

	var server = clusterdata["servers"][element];
	var content = "";

	// Add the name in a heading
	content += rightPaneTitle(server['name']);
	//content += "<hr />";

	content += rightPaneStatus(server['status']);

	content += rightPaneField("ID", server['id']);

	content += rightPaneField("Created", server['created']);

	// TODO: Update more frequently (Currently only updates on a new east pane load.)
	content += rightPaneField("Uptime", calculateUptime(server['created']));
	
	content += rightPaneField("Last powered on", calculateUptime(server['updated']));

	content += rightPaneField("Physical Host", server['OS-EXT-SRV-ATTR:hypervisor_hostname']);

	//content += "<hr />";

	var flavor = server["flavor"]["id"];
	var flavorTooltipContent = "Disk: " + clusterdata["flavors"][flavor]["disk"] + "GB<br/>";
	flavorTooltipContent += "RAM: " + clusterdata["flavors"][flavor]["ram"] + "MB<br/>";
	flavorTooltipContent += "VCPUs: " + clusterdata["flavors"][flavor]["vcpus"] + " VCPUs";

	content += rightPaneFieldWithTooltip("Flavor", clusterdata["flavors"][flavor]["name"],flavorTooltipContent);

	var image = server["image"]["id"]

	if (clusterdata["images"][image]) {	content += rightPaneField("Image", clusterdata["images"][image]["name"]);	} 
	else {		content += rightPaneField("Image", "Not found, probably deleted");
	}

	content += rightPaneField("Key Name", server["key_name"]);

	// Put these in a tool tip for hover over flavor
	// down to here

	//content += "<hr />";
	//content += "<button type=\"button\" class=\"btn btn-default\" data-toggle=\"tooltip\" data-placement=\"right\" title=\"Tooltip on right\">Tooltip on right</button>";

	//Networks
	if (server["addresses"].length != 0) {
		content += "<table class='table table-hover'><thead><tr><th>Network Name</th></tr></thead>"
		for(var networkx in server["addresses"]) {
			getNetworkByName(networkx);
			//console.log(clusterdata[][getNetworkByName(networkx)])
			content += "<tr><td><a href='javascript:loadNetRightPaneInfo(\"" + getNetworkByName(networkx) + "\")'>" + networkx + "</a></td></tr>";
		}
		content += "</tbody></table>"
	}

	//Volumes
	var volumes = server["os-extended-volumes:volumes_attached"];
	var realVolumes = existingVolumes(volumes);
	if (realVolumes.length == 0) {
		content += rightPaneField("Volumes", "None");
	}
	else {
		content += "<table class='table table-hover'><thead><tr><th>Volume Name</th><th>Size (GB)</th></tr></thead>"
		for (var i = 0; i < realVolumes.length; i++) {
			volid = realVolumes[i]["id"];
			content += "<tr><td><a href='javascript:loadVolRightPaneInfo(\"" + volid + "\")'>" + clusterdata["volumes"][volid]["name"] + "</a></td><td>" +  clusterdata["volumes"][volid]["size"] + "</td></tr>";
		}
		content += "</tbody></table>"
	}

	//Security groups
	var securitygroups = server["security_groups"];
	if (securitygroups.length == 0) {
		content += rightPaneField("Security Groups", "None");
	}
	else {
		content += "<table class='table table-hover'><thead><tr><th>Security Group Name</th></tr>"//<th>Type</th></tr></thead>"
		for (var i = 0; i < securitygroups.length; i++) {
			secid = securitygroups[i]["name"];
			content += "<tr><td>" + secid + "</td></tr>";
		}
		content += "</tbody></table>"
	}

	content += rightPaneField("CPU Util", " 70%");
	content += "<div id=\"CPUGraphRight\"></div>";

	content += rightPaneField("Network Traffic Rate", " 5mb/s");
	content += "<div id=\"NetworkGraphRight\"></div>";

	content += rightPaneField("Disk Read/Write", "14GB/32GB");
	content += "<div id=\"DiskGraphRight\"></div>";

	$("#pane-east").html(content);

	updateRightPaneInstanceGraphs();

	$('#right-instance-title').fitText(0.8, {minFontSize: '20px', maxFontSize: '80px'});

	$('[data-toggle="tooltip"]').tooltip({
		'placement': 'bottom',
		'html': true
	});

}

/**
 * Checks that each volume in a list of volumes exists.
 * Returns a list of the volumes that do exist.
 *
 * @param volumes	An array of volume IDs to be checked.
 */
function existingVolumes(volumes) {
	var realVolumes = [];
	volumes.forEach(function(entry) {
		if (clusterdata["volumes"][entry] != undefined) {
			realVolumes.push(x);
		}
	});
	return realVolumes;
}

/**
 * Returns a string containing the HTML for the heading in the east pane.
 *
 * @param title	The title of the element being shown in the right pane
 */
function rightPaneTitle(title) {
	return "<h3 id='right-instance-title'>" + title + "</h3>";
}

/**
 * Returns a string containing the HTML to create the status label in the east pane.
 *
 * @param status	The status of the element being shown in the right pane
 */
function rightPaneStatus(status) {
	if (status == "ACTIVE") {	return "<h4><span class='label label-success'>" + status + "</span></h4>"; }
	else if (status == "IN-USE") {	return "<h4><span class='label label-success'>" + status + "</span></h4>"; }
	else if (status == "AVAILABLE") {	return "<h4><span class='label label-info'>" + status + "</span></h4>"; }
	else if (status == "SHUTOFF") {return "<h4><span class='label label-danger'>" + status + "</span></h4>";	}
	else if (status == "BUILD") {return "<h4><span class='label label-default'>" + status + "</span></h4>";}
	else { return "<h4><span class='label label-warning'>" + status + "</span></h4>";	}
}

/**
 * Returns a string containing the HTML for a field in the east pane.
 *
 * @param field	The description for the value being shown
 * @param value The value being added to the east pane
 */
function rightPaneField(field, value) {
	return "<p><b> " + field + ": </b>" + value + "</p>";
}

/**
 * Returns a string containing the HTML for a field in the east pane.
 *
 * @param field	The description for the value being shown
 * @param value The value being added to the east pane
 * @param link	The action to be performed when the value is clicked on
 */
function rightPaneFieldWithLink(field, value, link) {
	return "<p><b>" + field + ": </b><a href=\"" + link + "\" >" + value + "</a></p>";
}

/**
 * Returns a string containing the HTML for a field in the east pane.
 *
 * @param field				The description for the value being shown
 * @param value 			The value being added to the east pane
 * @param tooltipContent	The HTML of the content to be displayed in the tooltip when the value is hovered over
 */
function rightPaneFieldWithTooltip(field, value, tooltipContent) {
	return "<p><b>" + field + ": </b><a href=\"#\" data-toggle=\"tooltip\" title=\"" + tooltipContent + "\">" + value + "</a></p>";
}

/**
 * Creates the graphs to be shown in the right pane when an instance is selected
 */
function updateRightPaneInstanceGraphs() {
	gData = [ { x: 0, y: 23}, { x: 1, y: 15 }, { x: 2, y: 79 }, { x: 3, y: 23}, { x: 4, y: 96 }, { x: 5, y: 79 }, { x: 6, y: 88}, { x: 7, y: 93 }, { x: 8, y: 69 }, { x: 9, y: 80}, { x: 10, y: 30 }, { x: 11, y: 4 }, { x: 12, y: 5}, { x: 13, y: 4 }, { x: 14, y: 4 }];
	createGraph(gData, '#CPUGraphRight');

	gData = [ { x: 0, y: 23}, { x: 1, y: 15 }, { x: 2, y: 79 }, { x: 3, y: 50}, { x: 4, y: 51 }, { x: 5, y: 79 }, { x: 6, y: 80}, { x: 7, y: 85 }, { x: 8, y: 78 }, { x: 9, y: 93}, { x: 10, y: 80 }, { x: 11, y: 79 }, { x: 12, y: 23}, { x: 13, y: 15 }, { x: 14, y: 79 }];
	createGraph(gData, '#NetworkGraphRight');

	gData = [ { x: 0, y: 23}, { x: 1, y: 24 }, { x: 2, y: 15 }, { x: 3, y: 20}, { x: 4, y: 22 }, { x: 5, y: 24 }, { x: 6, y: 25}, { x: 7, y: 25 }, { x: 8, y: 26 }, { x: 9, y: 29}, { x: 10, y: 30 }, { x: 11, y: 32 }, { x: 12, y: 32}, { x: 13, y: 32 }, { x: 14, y: 32 }];
	createGraph(gData, '#DiskGraphRight');
}


/**
 * Creates a graph from the given data and adds it to the location specified
 *
 * @param graphData	The data used to create the graph
 * @param selector	The location that the graph will be added to
 */
function createGraph(graphData, selector) {
		graph = new Rickshaw.Graph( {
		element: document.querySelector(selector),
		series: [
			{ color: 'steelblue', data: graphData}
		],
		height: 50,
	});
	var hoverDetail = new Rickshaw.Graph.HoverDetail( {
		graph: graph,
		xFormatter: function(x) { return x + "seconds" },
		yFormatter: function(y) { return Math.floor(y) + " percent" }
	} );
	graph.render();
}

/**
 *	Load's data on a particular volume in the right pane
 *
 *	@param	id		The string id of the element
 */
function loadVolRightPaneInfo(id) {
	myLayout.slideOpen('east');
	var content = JSON.stringify(clusterdata["volumes"][id]);
	//console.log(content)

	var volume = clusterdata["volumes"][id];
	var content = "";

	// Add the name in a heading
	content += rightPaneTitle(volume['name']);

	content += rightPaneStatus(volume["status"].toUpperCase());

	content += rightPaneField("ID", volume["id"]);

	content += rightPaneField("Created", volume["created_at"]);

	content += rightPaneField("Size", volume["size"] + "GB");

	content += rightPaneField("Physical Host", volume["os-vol-host-attr:host"]);

	if (volume["attachments"].length == 0) {
		content += rightPaneField("Attachment", "None");
	}
	else {
		content += rightPaneFieldWithLink("Attachment", clusterdata["servers"][volume["attachments"][0]["server_id"]]["name"], "javascript:loadInstRightPaneInfoRef('" + volume["attachments"][0]["server_id"] + "');");
	}

	content += rightPaneField("Bootable", volume["bootable"]);

	if (volume["description"] == "") {
		content += rightPaneField("Description", "None")
	}
	else {
		content += rightPaneField("Description", volume["description"]);
	}

	content += rightPaneField("Volume Type", volume["volume_type"]);


	//content += JSON.stringify(clusterdata["volumes"][id]);
	$("#pane-east").html(content);
}

/**
 *	Load's data on a particular network in the right pane
 *
 *	@param	id		The string id of the element
 */
function loadNetRightPaneInfo(id) {
	myLayout.slideOpen('east');
	var network = clusterdata["neutronnetwork"][id];
	var content = "";

	// Add the name in a heading
	content += rightPaneTitle(network['name']);

	content += rightPaneStatus(network["status"]);

	content += rightPaneField("ID", network["id"]);

	// Routers connected to network
	var devicesOnNetwork = [];
	for (var portx in clusterdata["ports"]) {
		if (clusterdata["ports"][portx]["network_id"] == id) {
			devicesOnNetwork.push(clusterdata["ports"][portx]["device_id"]);
		}
	}

	content += "<table class='table table-hover'><thead><tr><th>Router Name</th></tr>"//<th>Type</th></tr></thead>"
	for (var i = 0; i < devicesOnNetwork.length; i++) {
		if (clusterdata["routers"][devicesOnNetwork[i]] != undefined) {
			content += "<tr><td><a href='javascript:loadRouRightPaneInfo(\"" + devicesOnNetwork[i] + "\")'>" + clusterdata["routers"][devicesOnNetwork[i]]["name"] + "</a></td></tr>";
		}
	}
	content += "</tbody></table>"

	// Instances on network
	var instancesOnNetwork = []
	for (var instancex in clusterdata["servers"]) {
		for (var networkx in clusterdata["servers"][instancex]["addresses"]){
			if (getNetworkByName(networkx) == id) {
				instancesOnNetwork.push(instancex);
			}
		}
	}
	if (instancesOnNetwork.length == 0) {
		content += rightPaneField("Instances", "None");
	}
	else {
		content += "<table class='table table-hover'><thead><tr><th>Instance Name</th><th>IP</th></tr>"//<th>Type</th></tr></thead>"
		for (var i = 0; i < instancesOnNetwork.length; i++) {
			var instanceID = instancesOnNetwork[i];
			content += "<tr><td><a href='javascript:loadInstRightPaneInfoRef(\"" + instanceID + "\")'>" + clusterdata["servers"][instanceID]["name"] + "</a></td><td>" + clusterdata["servers"][instanceID]["addresses"][network['name']][0]["addr"] + "</td></tr>";
		}
		content += "</tbody></table>"
	}

	content += "<br/>";
	//content += JSON.stringify(clusterdata["neutronnetwork"][id]);
	//console.log(content)
	$("#pane-east").html(content);
}

/**
 *	Load's data on a particular router in the right pane
 *
 *	@param	id		The id of the element
 */
function loadRouRightPaneInfo(id) {
	myLayout.slideOpen('east');
	var router = clusterdata["routers"][id];
	var content = "";

	// Add the name in a heading
	content += rightPaneTitle(router['name']);

	content += rightPaneStatus(router["status"]);

	content += rightPaneField("ID", router["id"]);

	// Is null the value when there is no external gateway?
	// Can it have multiple external gateways? How is this shown in the JSON?
	if (router["external_gateway_info"]["network_id"] != null) {
		content += rightPaneFieldWithLink("External Gateway", router["external_gateway_info"]["network_id"],"javascript:loadNetRightPaneInfo('" + router["external_gateway_info"]["network_id"] + "');");
	}
	else {
		content += rightPaneField("External Gateway ID", "None")
	}

	// Networks connected to router
	var networksOnRouter = [];
	for (var portx in clusterdata["ports"]) {
		if (clusterdata["ports"][portx]["device_id"] == id) {
			networksOnRouter.push(clusterdata["ports"][portx]["network_id"]);
		}
	}
	content += "<table class='table table-hover'><thead><tr><th>Network Name</th></tr>"//<th>Type</th></tr></thead>"
	for (var i = 0; i < networksOnRouter.length; i++) {
		if (clusterdata["networks"][networksOnRouter[i]] != undefined) {
			content += "<tr><td><a href='javascript:loadNetRightPaneInfo(\"" + networksOnRouter[i] + "\")'>" + clusterdata["networks"][networksOnRouter[i]]["label"] + "</a></td></tr>";
		}
	}
	content += "</tbody></table>"

	//content += JSON.stringify(clusterdata["routers"][id]);
	//console.log(content)
	$("#pane-east").html(content);
}

/**
 *	Console.log cannot be used as a callback, so we use this function instead.
 *
 *	@param str		String to print
 */
function print(str) {
	console.log(JSON.parse(str));
}

/**
 *	Prints the data set for whatever calls it
 */
function printthis() {
	console.log(this);
}

function loadPaneLayout() {
	// @TODO: Perhaps these could be better styled to have obvious "Pin Open" Buttons where needed

	// this layout could be created with NO OPTIONS - but showing some here just as a sample...
	myLayout = $('body').layout({

		//	reference only - these options are NOT required because 'true' is the default
		closable:							true,	// pane can open & close
		resizable:							true,	// when open, pane can be resized 
		slidable:							true,	// when closed, pane can 'slide' open over other panes - closes on mouse-out
		livePaneResizing:					true,
		north__showOverflowOnHover: 		false, 		

		// some resizing/toggling settings
		north__togglerLength_closed: '20%',	// toggle-button is full-width of resizer-bar
		north__spacing_closed:		5,		// big resizer-bar when open (zero height)
		north__spacing_open:		5,
		south__resizable:			false,	// OVERRIDE the pane-default of 'resizable=true'
		south__spacing_open:		0,		// no resizer-bar when open (zero height)
		south__spacing_closed:		20,		// big resizer-bar when open (zero height)
		east__initClosed:			true,
		west__initClosed:			true,
		south__initHidden:			true,
		north__initClosed:			true,

		//	some pane-size settings
		north__minSize:				30,
		north__size: 				102, 
		west__minSize:				100,
		west__size: 				400, 
		east__size:					450,
		east__minSize:				300,
		east__maxSize:				.5, // 50% of layout width
		center__minWidth:			100,

		//	some pane animation settings
		west__animatePaneSizing:	true,
		west__fxSpeed_size:			"fast",	// 'fast' animation when resizing west-pane
		west__fxSpeed_open:			1000,	// 1-second animation when opening west-pane
		//west__fxSettings_open:		{ easing: "easeOutBounce" }, // 'bounce' effect when opening
		west__fxName_close:			"none",	// NO animation when closing west-pane

		//	enable showOverflow on west-pane so CSS popups will overlap north pane
		west__showOverflowOnHover:	false,
		west__onclose: closeSearch, 

		//	enable state management
		stateManagement__enabled:	true, // automatic cookie load & save enabled by default
		showDebugMessages:			true // log and/or display messages from debugging & testing code
	});

	// if there is no state-cookie, then DISABLE state management initially
	var cookieExists = !$.isEmptyObject( myLayout.readCookie() );
	if (!cookieExists) toggleStateManagement( true, false );

	// 'Reset State' button requires updated functionality in rc29.15+
	if ($.layout.revision && $.layout.revision >= 0.032915)
		$('#btnReset').show();
}

/**
 *	toggle whether the split panes resize live. Enabled except for debugging.
 *
 */
function toggleLiveResizing () {
	$.each( $.layout.config.borderPanes, function (i, pane) {
		var o = myLayout.options[ pane ];
		o.livePaneResizing = !o.livePaneResizing;
	});
}
	
function toggleStateManagement ( skipAlert, mode ) {
	if (!$.layout.plugins.stateManagement) return;

	var options	= myLayout.options.stateManagement,
		enabled	= options.enabled; // current setting
	if ($.type( mode ) === "boolean") {
		if (enabled === mode) return; // already correct
		enabled	= options.enabled = mode
	}
	else
		enabled	= options.enabled = !enabled; // toggle option

	if (!enabled) { // if disabling state management...
		myLayout.deleteCookie(); // ...clear cookie so will NOT be found on next refresh
		if (!skipAlert)
			alert( 'This layout will reload as the options specify \nwhen the page is refreshed.' );
	}
	else if (!skipAlert)
		alert( 'This layout will save & restore its last state \nwhen the page is refreshed.' );
}

var labelVisible = false;

function toggleLabels() {
	if (labelVisible == true) {
		$('.label').attr('class', 'label hidden');
		labelVisible = false;
	} else {
		$('.label').attr('class', 'label');
		labelVisible = true;
	}

	
}


/**
 *	showOptions
 *
 *	Pass a layout-options object, and the pane/key you want to display
 */
function showOptions (Layout, key, debugOpts) {
	var data = Layout.options;
	$.each(key.split("."), function() {
		data = data[this]; // recurse through multiple key-levels
	});
	debugData( data, 'options.'+key, debugOpts );
}

var waitForFinalEvent = (function () {
  var timers = {};
  return function (callback, ms, uniqueId) {
	if (!uniqueId) {
	  uniqueId = "Don't call this twice without a uniqueId";
	}
	if (timers[uniqueId]) {
	  clearTimeout (timers[uniqueId]);
	}
	timers[uniqueId] = setTimeout(callback, ms);
  };
})();

/**
 *	showState
 *
 *	Pass a layout-options object, and the pane/key you want to display
 */
function showState (Layout, key, debugOpts) {
	var data = Layout.state;
	$.each(key.split("."), function() {
		data = data[this]; // recurse through multiple key-levels
	});
	debugData( data, 'state.'+key, debugOpts );
}

